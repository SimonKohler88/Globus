
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007244  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080073d4  080073d4  000083d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074b8  080074b8  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  080074b8  080074b8  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074b8  080074b8  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b8  080074b8  000084b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074bc  080074bc  000084bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080074c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009060  2**0
                  CONTENTS
 10 .bss          000025d0  20000060  20000060  00009060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002630  20002630  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b58b  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d91  00000000  00000000  0002461b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001648  00000000  00000000  000283b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001148  00000000  00000000  000299f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001de9a  00000000  00000000  0002ab40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d51b  00000000  00000000  000489da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b24c2  00000000  00000000  00065ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001183b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f88  00000000  00000000  001183fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0011e384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073bc 	.word	0x080073bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080073bc 	.word	0x080073bc

080001d0 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b086      	sub	sp, #24
 80001d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001d6:	463b      	mov	r3, r7
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
 80001e2:	611a      	str	r2, [r3, #16]
 80001e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80001e6:	4b27      	ldr	r3, [pc, #156]	@ (8000284 <MX_ADC2_Init+0xb4>)
 80001e8:	4a27      	ldr	r2, [pc, #156]	@ (8000288 <MX_ADC2_Init+0xb8>)
 80001ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80001ec:	4b25      	ldr	r3, [pc, #148]	@ (8000284 <MX_ADC2_Init+0xb4>)
 80001ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80001f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80001f4:	4b23      	ldr	r3, [pc, #140]	@ (8000284 <MX_ADC2_Init+0xb4>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001fa:	4b22      	ldr	r3, [pc, #136]	@ (8000284 <MX_ADC2_Init+0xb4>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000200:	4b20      	ldr	r3, [pc, #128]	@ (8000284 <MX_ADC2_Init+0xb4>)
 8000202:	2200      	movs	r2, #0
 8000204:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000206:	4b1f      	ldr	r3, [pc, #124]	@ (8000284 <MX_ADC2_Init+0xb4>)
 8000208:	2200      	movs	r2, #0
 800020a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800020e:	4b1d      	ldr	r3, [pc, #116]	@ (8000284 <MX_ADC2_Init+0xb4>)
 8000210:	2200      	movs	r2, #0
 8000212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000214:	4b1b      	ldr	r3, [pc, #108]	@ (8000284 <MX_ADC2_Init+0xb4>)
 8000216:	2201      	movs	r2, #1
 8000218:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800021a:	4b1a      	ldr	r3, [pc, #104]	@ (8000284 <MX_ADC2_Init+0xb4>)
 800021c:	2200      	movs	r2, #0
 800021e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000220:	4b18      	ldr	r3, [pc, #96]	@ (8000284 <MX_ADC2_Init+0xb4>)
 8000222:	2201      	movs	r2, #1
 8000224:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000226:	4b17      	ldr	r3, [pc, #92]	@ (8000284 <MX_ADC2_Init+0xb4>)
 8000228:	2200      	movs	r2, #0
 800022a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800022e:	4b15      	ldr	r3, [pc, #84]	@ (8000284 <MX_ADC2_Init+0xb4>)
 8000230:	2204      	movs	r2, #4
 8000232:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000234:	4b13      	ldr	r3, [pc, #76]	@ (8000284 <MX_ADC2_Init+0xb4>)
 8000236:	2200      	movs	r2, #0
 8000238:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800023a:	4b12      	ldr	r3, [pc, #72]	@ (8000284 <MX_ADC2_Init+0xb4>)
 800023c:	2200      	movs	r2, #0
 800023e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000240:	4810      	ldr	r0, [pc, #64]	@ (8000284 <MX_ADC2_Init+0xb4>)
 8000242:	f000 fca5 	bl	8000b90 <HAL_ADC_Init>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 800024c:	f000 fa34 	bl	80006b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000250:	2301      	movs	r3, #1
 8000252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000254:	2301      	movs	r3, #1
 8000256:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800025c:	2300      	movs	r3, #0
 800025e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000268:	463b      	mov	r3, r7
 800026a:	4619      	mov	r1, r3
 800026c:	4805      	ldr	r0, [pc, #20]	@ (8000284 <MX_ADC2_Init+0xb4>)
 800026e:	f000 fe21 	bl	8000eb4 <HAL_ADC_ConfigChannel>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000278:	f000 fa1e 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800027c:	bf00      	nop
 800027e:	3718      	adds	r7, #24
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	2000007c 	.word	0x2000007c
 8000288:	50000100 	.word	0x50000100

0800028c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b08a      	sub	sp, #40	@ 0x28
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000294:	f107 0314 	add.w	r3, r7, #20
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a15      	ldr	r2, [pc, #84]	@ (8000300 <HAL_ADC_MspInit+0x74>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d124      	bne.n	80002f8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80002ae:	4b15      	ldr	r3, [pc, #84]	@ (8000304 <HAL_ADC_MspInit+0x78>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a14      	ldr	r2, [pc, #80]	@ (8000304 <HAL_ADC_MspInit+0x78>)
 80002b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <HAL_ADC_MspInit+0x78>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002c2:	613b      	str	r3, [r7, #16]
 80002c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <HAL_ADC_MspInit+0x78>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000304 <HAL_ADC_MspInit+0x78>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <HAL_ADC_MspInit+0x78>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80002de:	2370      	movs	r3, #112	@ 0x70
 80002e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e2:	2303      	movs	r3, #3
 80002e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e6:	2300      	movs	r3, #0
 80002e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ea:	f107 0314 	add.w	r3, r7, #20
 80002ee:	4619      	mov	r1, r3
 80002f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f4:	f001 f9e4 	bl	80016c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80002f8:	bf00      	nop
 80002fa:	3728      	adds	r7, #40	@ 0x28
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	50000100 	.word	0x50000100
 8000304:	40021000 	.word	0x40021000

08000308 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of mainTask */
    mainTaskHandle = osThreadNew(StartmaintTask, NULL, &mainTask_attributes);
 800030c:	4a0c      	ldr	r2, [pc, #48]	@ (8000340 <MX_FREERTOS_Init+0x38>)
 800030e:	2100      	movs	r1, #0
 8000310:	480c      	ldr	r0, [pc, #48]	@ (8000344 <MX_FREERTOS_Init+0x3c>)
 8000312:	f004 fa1b 	bl	800474c <osThreadNew>
 8000316:	4603      	mov	r3, r0
 8000318:	4a0b      	ldr	r2, [pc, #44]	@ (8000348 <MX_FREERTOS_Init+0x40>)
 800031a:	6013      	str	r3, [r2, #0]

    /* creation of motorCtrlTask */
    motorCtrlTaskHandle = osThreadNew(motorCtrlTaskEntry, NULL, &motorCtrlTask_attributes);
 800031c:	4a0b      	ldr	r2, [pc, #44]	@ (800034c <MX_FREERTOS_Init+0x44>)
 800031e:	2100      	movs	r1, #0
 8000320:	480b      	ldr	r0, [pc, #44]	@ (8000350 <MX_FREERTOS_Init+0x48>)
 8000322:	f004 fa13 	bl	800474c <osThreadNew>
 8000326:	4603      	mov	r3, r0
 8000328:	4a0a      	ldr	r2, [pc, #40]	@ (8000354 <MX_FREERTOS_Init+0x4c>)
 800032a:	6013      	str	r3, [r2, #0]

    /* creation of coilTaskT */
    coilTaskTHandle = osThreadNew(coilTask, NULL, &coilTaskT_attributes);
 800032c:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <MX_FREERTOS_Init+0x50>)
 800032e:	2100      	movs	r1, #0
 8000330:	480a      	ldr	r0, [pc, #40]	@ (800035c <MX_FREERTOS_Init+0x54>)
 8000332:	f004 fa0b 	bl	800474c <osThreadNew>
 8000336:	4603      	mov	r3, r0
 8000338:	4a09      	ldr	r2, [pc, #36]	@ (8000360 <MX_FREERTOS_Init+0x58>)
 800033a:	6013      	str	r3, [r2, #0]
    /* USER CODE END RTOS_THREADS */

    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	08007414 	.word	0x08007414
 8000344:	08000365 	.word	0x08000365
 8000348:	200001ec 	.word	0x200001ec
 800034c:	08007438 	.word	0x08007438
 8000350:	080003c5 	.word	0x080003c5
 8000354:	20000498 	.word	0x20000498
 8000358:	0800745c 	.word	0x0800745c
 800035c:	08000409 	.word	0x08000409
 8000360:	20000744 	.word	0x20000744

08000364 <StartmaintTask>:
 * @brief  Function implementing the mainTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartmaintTask */
void StartmaintTask(void *argument) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af02      	add	r7, sp, #8
 800036a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartmaintTask */
    MainTask_Msg_t msg_buffer;
    main_task_msg_queue_handle = xQueueCreateStatic(QUEUE_ENTRIES,
 800036c:	2300      	movs	r3, #0
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <StartmaintTask+0x54>)
 8000372:	4a12      	ldr	r2, [pc, #72]	@ (80003bc <StartmaintTask+0x58>)
 8000374:	2101      	movs	r1, #1
 8000376:	200a      	movs	r0, #10
 8000378:	f004 fbe4 	bl	8004b44 <xQueueGenericCreateStatic>
 800037c:	4603      	mov	r3, r0
 800037e:	4a10      	ldr	r2, [pc, #64]	@ (80003c0 <StartmaintTask+0x5c>)
 8000380:	6013      	str	r3, [r2, #0]


    /* Infinite loop */
    for (;;) {
        /* Check if Message pending */
        if (uxQueueMessagesWaiting(main_task_msg_queue_handle) > 0) {
 8000382:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <StartmaintTask+0x5c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f004 fefc 	bl	8005184 <uxQueueMessagesWaiting>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d00b      	beq.n	80003aa <StartmaintTask+0x46>
            /* Handle all Msg of other Tasks */
            while (xQueueReceive(main_task_msg_queue_handle, &msg_buffer, 0)) {
 8000392:	bf00      	nop
 8000394:	4b0a      	ldr	r3, [pc, #40]	@ (80003c0 <StartmaintTask+0x5c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f107 010c 	add.w	r1, r7, #12
 800039c:	2200      	movs	r2, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f004 fe0e 	bl	8004fc0 <xQueueReceive>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d1f4      	bne.n	8000394 <StartmaintTask+0x30>
            }
        }

        /* Wait 4 ms for I2C Interrupt*/
        uint8_t ret = ulTaskNotifyTake(pdTRUE, 4);
 80003aa:	2104      	movs	r1, #4
 80003ac:	2001      	movs	r0, #1
 80003ae:	f005 ff29 	bl	8006204 <ulTaskNotifyTake>
 80003b2:	4603      	mov	r3, r0
 80003b4:	73fb      	strb	r3, [r7, #15]
    for (;;) {
 80003b6:	e7e4      	b.n	8000382 <StartmaintTask+0x1e>
 80003b8:	200000cc 	.word	0x200000cc
 80003bc:	2000011c 	.word	0x2000011c
 80003c0:	20000128 	.word	0x20000128

080003c4 <motorCtrlTaskEntry>:
 * @brief Function implementing the motorCtrlTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_motorCtrlTaskEntry */
void motorCtrlTaskEntry(void *argument) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af02      	add	r7, sp, #8
 80003ca:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN motorCtrlTaskEntry */
    MotorTask_Msg_t msg_buffer;
    motor_task_msg_queue_handle = xQueueCreateStatic(QUEUE_ENTRIES,
 80003cc:	2300      	movs	r3, #0
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	4b0a      	ldr	r3, [pc, #40]	@ (80003fc <motorCtrlTaskEntry+0x38>)
 80003d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000400 <motorCtrlTaskEntry+0x3c>)
 80003d4:	2101      	movs	r1, #1
 80003d6:	200a      	movs	r0, #10
 80003d8:	f004 fbb4 	bl	8004b44 <xQueueGenericCreateStatic>
 80003dc:	4603      	mov	r3, r0
 80003de:	4a09      	ldr	r2, [pc, #36]	@ (8000404 <motorCtrlTaskEntry+0x40>)
 80003e0:	6013      	str	r3, [r2, #0]
                                                               &xQueueBuffer_motor_task_msg_queue);

    /* Infinite loop */
    for (;;) {
        /* Handle all Msg from other Tasks, block until received anything */
        uint8_t ret = xQueueReceive(motor_task_msg_queue_handle, &msg_buffer, portMAX_DELAY);
 80003e2:	4b08      	ldr	r3, [pc, #32]	@ (8000404 <motorCtrlTaskEntry+0x40>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f107 010c 	add.w	r1, r7, #12
 80003ea:	f04f 32ff 	mov.w	r2, #4294967295
 80003ee:	4618      	mov	r0, r3
 80003f0:	f004 fde6 	bl	8004fc0 <xQueueReceive>
 80003f4:	4603      	mov	r3, r0
 80003f6:	73fb      	strb	r3, [r7, #15]
    for (;;) {
 80003f8:	e7f3      	b.n	80003e2 <motorCtrlTaskEntry+0x1e>
 80003fa:	bf00      	nop
 80003fc:	2000012c 	.word	0x2000012c
 8000400:	2000017c 	.word	0x2000017c
 8000404:	20000188 	.word	0x20000188

08000408 <coilTask>:
 * @brief Function implementing the coilTaskT thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_coilTask */
void coilTask(void *argument) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af02      	add	r7, sp, #8
 800040e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN coilTask */
    CoilTask_Msg_t msg_buffer;
    coil_task_msg_queue_handle = xQueueCreateStatic(QUEUE_ENTRIES,
 8000410:	2300      	movs	r3, #0
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	4b0a      	ldr	r3, [pc, #40]	@ (8000440 <coilTask+0x38>)
 8000416:	4a0b      	ldr	r2, [pc, #44]	@ (8000444 <coilTask+0x3c>)
 8000418:	2101      	movs	r1, #1
 800041a:	200a      	movs	r0, #10
 800041c:	f004 fb92 	bl	8004b44 <xQueueGenericCreateStatic>
 8000420:	4603      	mov	r3, r0
 8000422:	4a09      	ldr	r2, [pc, #36]	@ (8000448 <coilTask+0x40>)
 8000424:	6013      	str	r3, [r2, #0]
                                                              &xQueueBuffer_coil_task_msg_queue);

    /* Infinite loop */
    for (;;) {
        /* Handle all Msg from other Tasks, block until received anything */
        uint8_t ret = xQueueReceive(coil_task_msg_queue_handle, &msg_buffer, portMAX_DELAY);
 8000426:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <coilTask+0x40>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f107 010c 	add.w	r1, r7, #12
 800042e:	f04f 32ff 	mov.w	r2, #4294967295
 8000432:	4618      	mov	r0, r3
 8000434:	f004 fdc4 	bl	8004fc0 <xQueueReceive>
 8000438:	4603      	mov	r3, r0
 800043a:	73fb      	strb	r3, [r7, #15]
    for (;;) {
 800043c:	e7f3      	b.n	8000426 <coilTask+0x1e>
 800043e:	bf00      	nop
 8000440:	2000018c 	.word	0x2000018c
 8000444:	200001dc 	.word	0x200001dc
 8000448:	200001e8 	.word	0x200001e8

0800044c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000452:	4b15      	ldr	r3, [pc, #84]	@ (80004a8 <MX_GPIO_Init+0x5c>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a14      	ldr	r2, [pc, #80]	@ (80004a8 <MX_GPIO_Init+0x5c>)
 8000458:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <MX_GPIO_Init+0x5c>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <MX_GPIO_Init+0x5c>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a0e      	ldr	r2, [pc, #56]	@ (80004a8 <MX_GPIO_Init+0x5c>)
 8000470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <MX_GPIO_Init+0x5c>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <MX_GPIO_Init+0x5c>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a08      	ldr	r2, [pc, #32]	@ (80004a8 <MX_GPIO_Init+0x5c>)
 8000488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <MX_GPIO_Init+0x5c>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000

080004ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000524 <MX_I2C1_Init+0x78>)
 80004b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80004b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000528 <MX_I2C1_Init+0x7c>)
 80004ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004bc:	4b18      	ldr	r3, [pc, #96]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004c2:	4b17      	ldr	r3, [pc, #92]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004c8:	4b15      	ldr	r3, [pc, #84]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004ce:	4b14      	ldr	r3, [pc, #80]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004d4:	4b12      	ldr	r3, [pc, #72]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004da:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004e6:	480e      	ldr	r0, [pc, #56]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004e8:	f001 fa5c 	bl	80019a4 <HAL_I2C_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004f2:	f000 f8e1 	bl	80006b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4809      	ldr	r0, [pc, #36]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004fa:	f001 fbad 	bl	8001c58 <HAL_I2CEx_ConfigAnalogFilter>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000504:	f000 f8d8 	bl	80006b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000508:	2100      	movs	r1, #0
 800050a:	4805      	ldr	r0, [pc, #20]	@ (8000520 <MX_I2C1_Init+0x74>)
 800050c:	f001 fbef 	bl	8001cee <HAL_I2CEx_ConfigDigitalFilter>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000516:	f000 f8cf 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200009f0 	.word	0x200009f0
 8000524:	40005400 	.word	0x40005400
 8000528:	00201d2b 	.word	0x00201d2b

0800052c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	@ 0x28
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a1b      	ldr	r2, [pc, #108]	@ (80005b8 <HAL_I2C_MspInit+0x8c>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d12f      	bne.n	80005ae <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b1b      	ldr	r3, [pc, #108]	@ (80005bc <HAL_I2C_MspInit+0x90>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a1a      	ldr	r2, [pc, #104]	@ (80005bc <HAL_I2C_MspInit+0x90>)
 8000554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <HAL_I2C_MspInit+0x90>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000566:	23c0      	movs	r3, #192	@ 0xc0
 8000568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800056a:	2312      	movs	r3, #18
 800056c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000572:	2303      	movs	r3, #3
 8000574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000576:	2304      	movs	r3, #4
 8000578:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	480f      	ldr	r0, [pc, #60]	@ (80005c0 <HAL_I2C_MspInit+0x94>)
 8000582:	f001 f89d 	bl	80016c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <HAL_I2C_MspInit+0x90>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <HAL_I2C_MspInit+0x90>)
 800058c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <HAL_I2C_MspInit+0x90>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2105      	movs	r1, #5
 80005a2:	201f      	movs	r0, #31
 80005a4:	f001 f862 	bl	800166c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80005a8:	201f      	movs	r0, #31
 80005aa:	f001 f87b 	bl	80016a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	@ 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40005400 	.word	0x40005400
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48000400 	.word	0x48000400

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 faac 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f810 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f7ff ff3c 	bl	800044c <MX_GPIO_Init>
  MX_ADC2_Init();
 80005d4:	f7ff fdfc 	bl	80001d0 <MX_ADC2_Init>
  MX_I2C1_Init();
 80005d8:	f7ff ff68 	bl	80004ac <MX_I2C1_Init>
  MX_TIM1_Init();
 80005dc:	f000 f956 	bl	800088c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e0:	f004 f84c 	bl	800467c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80005e4:	f7ff fe90 	bl	8000308 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80005e8:	f004 f87c 	bl	80046e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0x28>

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	@ 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005fa:	2228      	movs	r2, #40	@ 0x28
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f006 fdf4 	bl	80071ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
 8000622:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000630:	2300      	movs	r3, #0
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fba5 	bl	8001d88 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000644:	f000 f838 	bl	80006b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fbce 	bl	8002e04 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800066e:	f000 f823 	bl	80006b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8000672:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8000676:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fdee 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800068e:	f000 f813 	bl	80006b8 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3758      	adds	r7, #88	@ 0x58
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006aa:	d101      	bne.n	80006b0 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ac:	f000 fa50 	bl	8000b50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <Error_Handler+0x8>

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_MspInit+0x4c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a10      	ldr	r2, [pc, #64]	@ (8000710 <HAL_MspInit+0x4c>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <HAL_MspInit+0x4c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <HAL_MspInit+0x4c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_MspInit+0x4c>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <HAL_MspInit+0x4c>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	210f      	movs	r1, #15
 80006fe:	f06f 0001 	mvn.w	r0, #1
 8000702:	f000 ffb3 	bl	800166c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08e      	sub	sp, #56	@ 0x38
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800071c:	2300      	movs	r3, #0
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000724:	4b34      	ldr	r3, [pc, #208]	@ (80007f8 <HAL_InitTick+0xe4>)
 8000726:	69db      	ldr	r3, [r3, #28]
 8000728:	4a33      	ldr	r2, [pc, #204]	@ (80007f8 <HAL_InitTick+0xe4>)
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	61d3      	str	r3, [r2, #28]
 8000730:	4b31      	ldr	r3, [pc, #196]	@ (80007f8 <HAL_InitTick+0xe4>)
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800073c:	f107 0210 	add.w	r2, r7, #16
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fd5a 	bl	8003200 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000752:	2b00      	cmp	r3, #0
 8000754:	d103      	bne.n	800075e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000756:	f002 fd31 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 800075a:	6378      	str	r0, [r7, #52]	@ 0x34
 800075c:	e004      	b.n	8000768 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800075e:	f002 fd2d 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 8000762:	4603      	mov	r3, r0
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800076a:	4a24      	ldr	r2, [pc, #144]	@ (80007fc <HAL_InitTick+0xe8>)
 800076c:	fba2 2303 	umull	r2, r3, r2, r3
 8000770:	0c9b      	lsrs	r3, r3, #18
 8000772:	3b01      	subs	r3, #1
 8000774:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000776:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <HAL_InitTick+0xec>)
 8000778:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800077c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800077e:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <HAL_InitTick+0xec>)
 8000780:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000784:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000786:	4a1e      	ldr	r2, [pc, #120]	@ (8000800 <HAL_InitTick+0xec>)
 8000788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800078a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800078c:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <HAL_InitTick+0xec>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <HAL_InitTick+0xec>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <HAL_InitTick+0xec>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800079e:	4818      	ldr	r0, [pc, #96]	@ (8000800 <HAL_InitTick+0xec>)
 80007a0:	f002 fe86 	bl	80034b0 <HAL_TIM_Base_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80007aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d11b      	bne.n	80007ea <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80007b2:	4813      	ldr	r0, [pc, #76]	@ (8000800 <HAL_InitTick+0xec>)
 80007b4:	f002 fed4 	bl	8003560 <HAL_TIM_Base_Start_IT>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80007be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d111      	bne.n	80007ea <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007c6:	201c      	movs	r0, #28
 80007c8:	f000 ff6c 	bl	80016a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b0f      	cmp	r3, #15
 80007d0:	d808      	bhi.n	80007e4 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80007d2:	2200      	movs	r2, #0
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	201c      	movs	r0, #28
 80007d8:	f000 ff48 	bl	800166c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007dc:	4a09      	ldr	r2, [pc, #36]	@ (8000804 <HAL_InitTick+0xf0>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	e002      	b.n	80007ea <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3738      	adds	r7, #56	@ 0x38
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000
 80007fc:	431bde83 	.word	0x431bde83
 8000800:	20000a74 	.word	0x20000a74
 8000804:	20000004 	.word	0x20000004

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <NMI_Handler+0x4>

08000810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <MemManage_Handler+0x4>

08000820 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <UsageFault_Handler+0x4>

08000830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000844:	4802      	ldr	r0, [pc, #8]	@ (8000850 <TIM2_IRQHandler+0x10>)
 8000846:	f002 ff48 	bl	80036da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000a74 	.word	0x20000a74

08000854 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000858:	4802      	ldr	r0, [pc, #8]	@ (8000864 <I2C1_EV_IRQHandler+0x10>)
 800085a:	f001 f97b 	bl	8001b54 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200009f0 	.word	0x200009f0

08000868 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <SystemInit+0x20>)
 800086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000872:	4a05      	ldr	r2, [pc, #20]	@ (8000888 <SystemInit+0x20>)
 8000874:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000878:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b09a      	sub	sp, #104	@ 0x68
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
 80008bc:	615a      	str	r2, [r3, #20]
 80008be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	222c      	movs	r2, #44	@ 0x2c
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f006 fc90 	bl	80071ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008cc:	4b43      	ldr	r3, [pc, #268]	@ (80009dc <MX_TIM1_Init+0x150>)
 80008ce:	4a44      	ldr	r2, [pc, #272]	@ (80009e0 <MX_TIM1_Init+0x154>)
 80008d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008d2:	4b42      	ldr	r3, [pc, #264]	@ (80009dc <MX_TIM1_Init+0x150>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d8:	4b40      	ldr	r3, [pc, #256]	@ (80009dc <MX_TIM1_Init+0x150>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008de:	4b3f      	ldr	r3, [pc, #252]	@ (80009dc <MX_TIM1_Init+0x150>)
 80008e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e6:	4b3d      	ldr	r3, [pc, #244]	@ (80009dc <MX_TIM1_Init+0x150>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ec:	4b3b      	ldr	r3, [pc, #236]	@ (80009dc <MX_TIM1_Init+0x150>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f2:	4b3a      	ldr	r3, [pc, #232]	@ (80009dc <MX_TIM1_Init+0x150>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008f8:	4838      	ldr	r0, [pc, #224]	@ (80009dc <MX_TIM1_Init+0x150>)
 80008fa:	f002 fdd9 	bl	80034b0 <HAL_TIM_Base_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000904:	f7ff fed8 	bl	80006b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800090e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000912:	4619      	mov	r1, r3
 8000914:	4831      	ldr	r0, [pc, #196]	@ (80009dc <MX_TIM1_Init+0x150>)
 8000916:	f003 f8f7 	bl	8003b08 <HAL_TIM_ConfigClockSource>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000920:	f7ff feca 	bl	80006b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000924:	482d      	ldr	r0, [pc, #180]	@ (80009dc <MX_TIM1_Init+0x150>)
 8000926:	f002 fe77 	bl	8003618 <HAL_TIM_PWM_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000930:	f7ff fec2 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000940:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000944:	4619      	mov	r1, r3
 8000946:	4825      	ldr	r0, [pc, #148]	@ (80009dc <MX_TIM1_Init+0x150>)
 8000948:	f003 fd94 	bl	8004474 <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000952:	f7ff feb1 	bl	80006b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000956:	2360      	movs	r3, #96	@ 0x60
 8000958:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095e:	2300      	movs	r3, #0
 8000960:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000962:	2300      	movs	r3, #0
 8000964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000972:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000976:	2208      	movs	r2, #8
 8000978:	4619      	mov	r1, r3
 800097a:	4818      	ldr	r0, [pc, #96]	@ (80009dc <MX_TIM1_Init+0x150>)
 800097c:	f002 ffb0 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000986:	f7ff fe97 	bl	80006b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800099e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4807      	ldr	r0, [pc, #28]	@ (80009dc <MX_TIM1_Init+0x150>)
 80009c0:	f003 fdc6 	bl	8004550 <HAL_TIMEx_ConfigBreakDeadTime>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80009ca:	f7ff fe75 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ce:	4803      	ldr	r0, [pc, #12]	@ (80009dc <MX_TIM1_Init+0x150>)
 80009d0:	f000 f828 	bl	8000a24 <HAL_TIM_MspPostInit>

}
 80009d4:	bf00      	nop
 80009d6:	3768      	adds	r7, #104	@ 0x68
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000ac0 	.word	0x20000ac0
 80009e0:	40012c00 	.word	0x40012c00

080009e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <HAL_TIM_Base_MspInit+0x38>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d10b      	bne.n	8000a0e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <HAL_TIM_Base_MspInit+0x3c>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4a09      	ldr	r2, [pc, #36]	@ (8000a20 <HAL_TIM_Base_MspInit+0x3c>)
 80009fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a00:	6193      	str	r3, [r2, #24]
 8000a02:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <HAL_TIM_Base_MspInit+0x3c>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40012c00 	.word	0x40012c00
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a20      	ldr	r2, [pc, #128]	@ (8000ac4 <HAL_TIM_MspPostInit+0xa0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d139      	bne.n	8000aba <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a46:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <HAL_TIM_MspPostInit+0xa4>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac8 <HAL_TIM_MspPostInit+0xa4>)
 8000a4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a50:	6153      	str	r3, [r2, #20]
 8000a52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <HAL_TIM_MspPostInit+0xa4>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <HAL_TIM_MspPostInit+0xa4>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	4a19      	ldr	r2, [pc, #100]	@ (8000ac8 <HAL_TIM_MspPostInit+0xa4>)
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a68:	6153      	str	r3, [r2, #20]
 8000a6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <HAL_TIM_MspPostInit+0xa4>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PF0 / OSC_IN     ------> TIM1_CH3N
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a76:	2301      	movs	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a86:	2306      	movs	r3, #6
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480e      	ldr	r0, [pc, #56]	@ (8000acc <HAL_TIM_MspPostInit+0xa8>)
 8000a92:	f000 fe15 	bl	80016c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000aa8:	2306      	movs	r3, #6
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab6:	f000 fe03 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	@ 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40012c00 	.word	0x40012c00
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48001400 	.word	0x48001400

08000ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b08 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad4:	f7ff fec8 	bl	8000868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	@ (8000b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b14 <LoopForever+0xe>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	@ (8000b1c <LoopForever+0x16>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afe:	f006 fbd3 	bl	80072a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b02:	f7ff fd5f 	bl	80005c4 <main>

08000b06 <LoopForever>:

LoopForever:
    b LoopForever
 8000b06:	e7fe      	b.n	8000b06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b08:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b14:	080074c0 	.word	0x080074c0
  ldr r2, =_sbss
 8000b18:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b1c:	20002630 	.word	0x20002630

08000b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_2_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <HAL_Init+0x28>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	@ (8000b4c <HAL_Init+0x28>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 fd8e 	bl	8001656 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f7ff fdea 	bl	8000714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fdc0 	bl	80006c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40022000 	.word	0x40022000

08000b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000b0c 	.word	0x20000b0c

08000b78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b7c:	4b03      	ldr	r3, [pc, #12]	@ (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000b0c 	.word	0x20000b0c

08000b90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09a      	sub	sp, #104	@ 0x68
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d101      	bne.n	8000bb0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	e172      	b.n	8000e96 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d176      	bne.n	8000cb0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d152      	bne.n	8000c70 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fb51 	bl	800028c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d13b      	bne.n	8000c70 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f000 fc19 	bl	8001430 <ADC_Disable>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	f003 0310 	and.w	r3, r3, #16
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d12f      	bne.n	8000c70 <HAL_ADC_Init+0xe0>
 8000c10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d12b      	bne.n	8000c70 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c20:	f023 0302 	bic.w	r3, r3, #2
 8000c24:	f043 0202 	orr.w	r2, r3, #2
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000c3a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000c4a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c4c:	4b94      	ldr	r3, [pc, #592]	@ (8000ea0 <HAL_ADC_Init+0x310>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a94      	ldr	r2, [pc, #592]	@ (8000ea4 <HAL_ADC_Init+0x314>)
 8000c52:	fba2 2303 	umull	r2, r3, r2, r3
 8000c56:	0c9a      	lsrs	r2, r3, #18
 8000c58:	4613      	mov	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c62:	e002      	b.n	8000c6a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1f9      	bne.n	8000c64 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d007      	beq.n	8000c8e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c8c:	d110      	bne.n	8000cb0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	f023 0312 	bic.w	r3, r3, #18
 8000c96:	f043 0210 	orr.w	r2, r3, #16
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	f043 0201 	orr.w	r2, r3, #1
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f040 80df 	bne.w	8000e7c <HAL_ADC_Init+0x2ec>
 8000cbe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 80da 	bne.w	8000e7c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 80d2 	bne.w	8000e7c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ce0:	f043 0202 	orr.w	r2, r3, #2
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8000ea8 <HAL_ADC_Init+0x318>)
 8000cea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cf4:	d102      	bne.n	8000cfc <HAL_ADC_Init+0x16c>
 8000cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8000eac <HAL_ADC_Init+0x31c>)
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	e002      	b.n	8000d02 <HAL_ADC_Init+0x172>
 8000cfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000d00:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d108      	bne.n	8000d22 <HAL_ADC_Init+0x192>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d101      	bne.n	8000d22 <HAL_ADC_Init+0x192>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <HAL_ADC_Init+0x194>
 8000d22:	2300      	movs	r3, #0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d11c      	bne.n	8000d62 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d28:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d010      	beq.n	8000d50 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d107      	bne.n	8000d4a <HAL_ADC_Init+0x1ba>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d101      	bne.n	8000d4a <HAL_ADC_Init+0x1ba>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <HAL_ADC_Init+0x1bc>
 8000d4a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d108      	bne.n	8000d62 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d60:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7e5b      	ldrb	r3, [r3, #25]
 8000d66:	035b      	lsls	r3, r3, #13
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000d6c:	2a01      	cmp	r2, #1
 8000d6e:	d002      	beq.n	8000d76 <HAL_ADC_Init+0x1e6>
 8000d70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d74:	e000      	b.n	8000d78 <HAL_ADC_Init+0x1e8>
 8000d76:	2200      	movs	r2, #0
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d11b      	bne.n	8000dce <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7e5b      	ldrb	r3, [r3, #25]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d109      	bne.n	8000db2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da2:	3b01      	subs	r3, #1
 8000da4:	045a      	lsls	r2, r3, #17
 8000da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000da8:	4313      	orrs	r3, r2
 8000daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dae:	663b      	str	r3, [r7, #96]	@ 0x60
 8000db0:	e00d      	b.n	8000dce <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000dba:	f043 0220 	orr.w	r2, r3, #32
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	f043 0201 	orr.w	r2, r3, #1
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d007      	beq.n	8000de6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dde:	4313      	orrs	r3, r2
 8000de0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000de2:	4313      	orrs	r3, r2
 8000de4:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d114      	bne.n	8000e1e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	6812      	ldr	r2, [r2, #0]
 8000dfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e02:	f023 0302 	bic.w	r3, r3, #2
 8000e06:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7e1b      	ldrb	r3, [r3, #24]
 8000e0c:	039a      	lsls	r2, r3, #14
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4313      	orrs	r3, r2
 8000e18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <HAL_ADC_Init+0x320>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6812      	ldr	r2, [r2, #0]
 8000e2c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000e2e:	430b      	orrs	r3, r1
 8000e30:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d10c      	bne.n	8000e54 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e40:	f023 010f 	bic.w	r1, r3, #15
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	1e5a      	subs	r2, r3, #1
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e52:	e007      	b.n	8000e64 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 020f 	bic.w	r2, r2, #15
 8000e62:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	f023 0303 	bic.w	r3, r3, #3
 8000e72:	f043 0201 	orr.w	r2, r3, #1
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e7a:	e00a      	b.n	8000e92 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	f023 0312 	bic.w	r3, r3, #18
 8000e84:	f043 0210 	orr.w	r2, r3, #16
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3768      	adds	r7, #104	@ 0x68
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	431bde83 	.word	0x431bde83
 8000ea8:	50000300 	.word	0x50000300
 8000eac:	50000100 	.word	0x50000100
 8000eb0:	fff0c007 	.word	0xfff0c007

08000eb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b09b      	sub	sp, #108	@ 0x6c
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d101      	bne.n	8000ed6 <HAL_ADC_ConfigChannel+0x22>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e2a1      	b.n	800141a <HAL_ADC_ConfigChannel+0x566>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f040 8285 	bne.w	80013f8 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d81c      	bhi.n	8000f30 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	461a      	mov	r2, r3
 8000f0a:	231f      	movs	r3, #31
 8000f0c:	4093      	lsls	r3, r2
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	4019      	ands	r1, r3
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa00 f203 	lsl.w	r2, r0, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f2e:	e063      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b09      	cmp	r3, #9
 8000f36:	d81e      	bhi.n	8000f76 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	3b1e      	subs	r3, #30
 8000f4c:	221f      	movs	r2, #31
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	4019      	ands	r1, r3
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	3b1e      	subs	r3, #30
 8000f68:	fa00 f203 	lsl.w	r2, r0, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f74:	e040      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b0e      	cmp	r3, #14
 8000f7c:	d81e      	bhi.n	8000fbc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	3b3c      	subs	r3, #60	@ 0x3c
 8000f92:	221f      	movs	r2, #31
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	4019      	ands	r1, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4413      	add	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	3b3c      	subs	r3, #60	@ 0x3c
 8000fae:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fba:	e01d      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	3b5a      	subs	r3, #90	@ 0x5a
 8000fd0:	221f      	movs	r2, #31
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	4019      	ands	r1, r3
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	3b5a      	subs	r3, #90	@ 0x5a
 8000fec:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 80e5 	bne.w	80011d2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b09      	cmp	r3, #9
 800100e:	d91c      	bls.n	800104a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6999      	ldr	r1, [r3, #24]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	3b1e      	subs	r3, #30
 8001022:	2207      	movs	r2, #7
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	4019      	ands	r1, r3
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	6898      	ldr	r0, [r3, #8]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	3b1e      	subs	r3, #30
 800103c:	fa00 f203 	lsl.w	r2, r0, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	619a      	str	r2, [r3, #24]
 8001048:	e019      	b.n	800107e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6959      	ldr	r1, [r3, #20]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	2207      	movs	r2, #7
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	4019      	ands	r1, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	6898      	ldr	r0, [r3, #8]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	fa00 f203 	lsl.w	r2, r0, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	3b01      	subs	r3, #1
 800109c:	2b03      	cmp	r3, #3
 800109e:	d84f      	bhi.n	8001140 <HAL_ADC_ConfigChannel+0x28c>
 80010a0:	a201      	add	r2, pc, #4	@ (adr r2, 80010a8 <HAL_ADC_ConfigChannel+0x1f4>)
 80010a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a6:	bf00      	nop
 80010a8:	080010b9 	.word	0x080010b9
 80010ac:	080010db 	.word	0x080010db
 80010b0:	080010fd 	.word	0x080010fd
 80010b4:	0800111f 	.word	0x0800111f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010be:	4b9c      	ldr	r3, [pc, #624]	@ (8001330 <HAL_ADC_ConfigChannel+0x47c>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	6812      	ldr	r2, [r2, #0]
 80010c6:	0691      	lsls	r1, r2, #26
 80010c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010ca:	430a      	orrs	r2, r1
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80010d6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010d8:	e07b      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80010e0:	4b93      	ldr	r3, [pc, #588]	@ (8001330 <HAL_ADC_ConfigChannel+0x47c>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	0691      	lsls	r1, r2, #26
 80010ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010ec:	430a      	orrs	r2, r1
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80010f8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010fa:	e06a      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001102:	4b8b      	ldr	r3, [pc, #556]	@ (8001330 <HAL_ADC_ConfigChannel+0x47c>)
 8001104:	4013      	ands	r3, r2
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	0691      	lsls	r1, r2, #26
 800110c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800110e:	430a      	orrs	r2, r1
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800111a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800111c:	e059      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001124:	4b82      	ldr	r3, [pc, #520]	@ (8001330 <HAL_ADC_ConfigChannel+0x47c>)
 8001126:	4013      	ands	r3, r2
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	0691      	lsls	r1, r2, #26
 800112e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001130:	430a      	orrs	r2, r1
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800113c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800113e:	e048      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001146:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	069b      	lsls	r3, r3, #26
 8001150:	429a      	cmp	r2, r3
 8001152:	d107      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001162:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800116a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	069b      	lsls	r3, r3, #26
 8001174:	429a      	cmp	r2, r3
 8001176:	d107      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001186:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800118e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	069b      	lsls	r3, r3, #26
 8001198:	429a      	cmp	r2, r3
 800119a:	d107      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80011aa:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80011b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	069b      	lsls	r3, r3, #26
 80011bc:	429a      	cmp	r2, r3
 80011be:	d107      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80011ce:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80011d0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d108      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x33e>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x33e>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x340>
 80011f2:	2300      	movs	r3, #0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f040 810a 	bne.w	800140e <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d00f      	beq.n	8001222 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2201      	movs	r2, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43da      	mvns	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	400a      	ands	r2, r1
 800121c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001220:	e049      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	409a      	lsls	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b09      	cmp	r3, #9
 8001242:	d91c      	bls.n	800127e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6999      	ldr	r1, [r3, #24]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	3b1b      	subs	r3, #27
 8001256:	2207      	movs	r2, #7
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	4019      	ands	r1, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	6898      	ldr	r0, [r3, #8]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	3b1b      	subs	r3, #27
 8001270:	fa00 f203 	lsl.w	r2, r0, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	619a      	str	r2, [r3, #24]
 800127c:	e01b      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6959      	ldr	r1, [r3, #20]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	2207      	movs	r2, #7
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	4019      	ands	r1, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	6898      	ldr	r0, [r3, #8]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	fa00 f203 	lsl.w	r2, r0, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <HAL_ADC_ConfigChannel+0x480>)
 80012b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d105      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d015      	beq.n	80012fa <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012d2:	2b11      	cmp	r3, #17
 80012d4:	d105      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80012d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80012e6:	2b12      	cmp	r3, #18
 80012e8:	f040 8091 	bne.w	800140e <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80012ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f040 808a 	bne.w	800140e <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001302:	d102      	bne.n	800130a <HAL_ADC_ConfigChannel+0x456>
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <HAL_ADC_ConfigChannel+0x484>)
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e002      	b.n	8001310 <HAL_ADC_ConfigChannel+0x45c>
 800130a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800130e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b01      	cmp	r3, #1
 800131c:	d10e      	bne.n	800133c <HAL_ADC_ConfigChannel+0x488>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b01      	cmp	r3, #1
 800132a:	d107      	bne.n	800133c <HAL_ADC_ConfigChannel+0x488>
 800132c:	2301      	movs	r3, #1
 800132e:	e006      	b.n	800133e <HAL_ADC_ConfigChannel+0x48a>
 8001330:	83fff000 	.word	0x83fff000
 8001334:	50000300 	.word	0x50000300
 8001338:	50000100 	.word	0x50000100
 800133c:	2300      	movs	r3, #0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d150      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001342:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001344:	2b00      	cmp	r3, #0
 8001346:	d010      	beq.n	800136a <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b01      	cmp	r3, #1
 8001352:	d107      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x4b0>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x4b0>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <HAL_ADC_ConfigChannel+0x4b2>
 8001364:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001366:	2b00      	cmp	r3, #0
 8001368:	d13c      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b10      	cmp	r3, #16
 8001370:	d11d      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x4fa>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800137a:	d118      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800137c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001384:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001386:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001388:	4b27      	ldr	r3, [pc, #156]	@ (8001428 <HAL_ADC_ConfigChannel+0x574>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a27      	ldr	r2, [pc, #156]	@ (800142c <HAL_ADC_ConfigChannel+0x578>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	0c9a      	lsrs	r2, r3, #18
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800139e:	e002      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f9      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013ac:	e02e      	b.n	800140c <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b11      	cmp	r3, #17
 80013b4:	d10b      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x51a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013be:	d106      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80013c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80013c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013ca:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013cc:	e01e      	b.n	800140c <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b12      	cmp	r3, #18
 80013d4:	d11a      	bne.n	800140c <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80013d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80013de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013e0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013e2:	e013      	b.n	800140c <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	f043 0220 	orr.w	r2, r3, #32
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80013f6:	e00a      	b.n	800140e <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	f043 0220 	orr.w	r2, r3, #32
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800140a:	e000      	b.n	800140e <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800140c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001416:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800141a:	4618      	mov	r0, r3
 800141c:	376c      	adds	r7, #108	@ 0x6c
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000000 	.word	0x20000000
 800142c:	431bde83 	.word	0x431bde83

08001430 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d108      	bne.n	800145c <ADC_Disable+0x2c>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <ADC_Disable+0x2c>
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <ADC_Disable+0x2e>
 800145c:	2300      	movs	r3, #0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d047      	beq.n	80014f2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 030d 	and.w	r3, r3, #13
 800146c:	2b01      	cmp	r3, #1
 800146e:	d10f      	bne.n	8001490 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0202 	orr.w	r2, r2, #2
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2203      	movs	r2, #3
 8001486:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001488:	f7ff fb76 	bl	8000b78 <HAL_GetTick>
 800148c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800148e:	e029      	b.n	80014e4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001494:	f043 0210 	orr.w	r2, r3, #16
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a0:	f043 0201 	orr.w	r2, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e023      	b.n	80014f4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014ac:	f7ff fb64 	bl	8000b78 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d914      	bls.n	80014e4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d10d      	bne.n	80014e4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014cc:	f043 0210 	orr.w	r2, r3, #16
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d8:	f043 0201 	orr.w	r2, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e007      	b.n	80014f4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d0dc      	beq.n	80014ac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	@ (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4907      	ldr	r1, [pc, #28]	@ (8001598 <__NVIC_EnableIRQ+0x38>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	@ (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	@ 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	@ 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ff4c 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167e:	f7ff ff61 	bl	8001544 <__NVIC_GetPriorityGrouping>
 8001682:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	6978      	ldr	r0, [r7, #20]
 800168a:	f7ff ffb1 	bl	80015f0 <NVIC_EncodePriority>
 800168e:	4602      	mov	r2, r0
 8001690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff80 	bl	800159c <__NVIC_SetPriority>
}
 800169c:	bf00      	nop
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff54 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ce:	e14e      	b.n	800196e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8140 	beq.w	8001968 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d005      	beq.n	8001700 <HAL_GPIO_Init+0x40>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d130      	bne.n	8001762 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001736:	2201      	movs	r2, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	f003 0201 	and.w	r2, r3, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b03      	cmp	r3, #3
 800176c:	d017      	beq.n	800179e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d123      	bne.n	80017f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	6939      	ldr	r1, [r7, #16]
 80017ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0203 	and.w	r2, r3, #3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 809a 	beq.w	8001968 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001834:	4b55      	ldr	r3, [pc, #340]	@ (800198c <HAL_GPIO_Init+0x2cc>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a54      	ldr	r2, [pc, #336]	@ (800198c <HAL_GPIO_Init+0x2cc>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b52      	ldr	r3, [pc, #328]	@ (800198c <HAL_GPIO_Init+0x2cc>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800184c:	4a50      	ldr	r2, [pc, #320]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3302      	adds	r3, #2
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001876:	d013      	beq.n	80018a0 <HAL_GPIO_Init+0x1e0>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a46      	ldr	r2, [pc, #280]	@ (8001994 <HAL_GPIO_Init+0x2d4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d00d      	beq.n	800189c <HAL_GPIO_Init+0x1dc>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a45      	ldr	r2, [pc, #276]	@ (8001998 <HAL_GPIO_Init+0x2d8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d007      	beq.n	8001898 <HAL_GPIO_Init+0x1d8>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a44      	ldr	r2, [pc, #272]	@ (800199c <HAL_GPIO_Init+0x2dc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d101      	bne.n	8001894 <HAL_GPIO_Init+0x1d4>
 8001890:	2303      	movs	r3, #3
 8001892:	e006      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 8001894:	2305      	movs	r3, #5
 8001896:	e004      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 8001898:	2302      	movs	r3, #2
 800189a:	e002      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 80018a0:	2300      	movs	r3, #0
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	f002 0203 	and.w	r2, r2, #3
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	4093      	lsls	r3, r2
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018b2:	4937      	ldr	r1, [pc, #220]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c0:	4b37      	ldr	r3, [pc, #220]	@ (80019a0 <HAL_GPIO_Init+0x2e0>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018e4:	4a2e      	ldr	r2, [pc, #184]	@ (80019a0 <HAL_GPIO_Init+0x2e0>)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ea:	4b2d      	ldr	r3, [pc, #180]	@ (80019a0 <HAL_GPIO_Init+0x2e0>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800190e:	4a24      	ldr	r2, [pc, #144]	@ (80019a0 <HAL_GPIO_Init+0x2e0>)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001914:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <HAL_GPIO_Init+0x2e0>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001938:	4a19      	ldr	r2, [pc, #100]	@ (80019a0 <HAL_GPIO_Init+0x2e0>)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800193e:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <HAL_GPIO_Init+0x2e0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	43db      	mvns	r3, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001962:	4a0f      	ldr	r2, [pc, #60]	@ (80019a0 <HAL_GPIO_Init+0x2e0>)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3301      	adds	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	f47f aea9 	bne.w	80016d0 <HAL_GPIO_Init+0x10>
  }
}
 800197e:	bf00      	nop
 8001980:	bf00      	nop
 8001982:	371c      	adds	r7, #28
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000
 8001990:	40010000 	.word	0x40010000
 8001994:	48000400 	.word	0x48000400
 8001998:	48000800 	.word	0x48000800
 800199c:	48000c00 	.word	0x48000c00
 80019a0:	40010400 	.word	0x40010400

080019a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0b3      	b.n	8001b1e <HAL_I2C_Init+0x17a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d12c      	bne.n	8001a1c <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a56      	ldr	r2, [pc, #344]	@ (8001b28 <HAL_I2C_Init+0x184>)
 80019ce:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a56      	ldr	r2, [pc, #344]	@ (8001b2c <HAL_I2C_Init+0x188>)
 80019d4:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a55      	ldr	r2, [pc, #340]	@ (8001b30 <HAL_I2C_Init+0x18c>)
 80019da:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a55      	ldr	r2, [pc, #340]	@ (8001b34 <HAL_I2C_Init+0x190>)
 80019e0:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a54      	ldr	r2, [pc, #336]	@ (8001b38 <HAL_I2C_Init+0x194>)
 80019e6:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a54      	ldr	r2, [pc, #336]	@ (8001b3c <HAL_I2C_Init+0x198>)
 80019ec:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a53      	ldr	r2, [pc, #332]	@ (8001b40 <HAL_I2C_Init+0x19c>)
 80019f2:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a53      	ldr	r2, [pc, #332]	@ (8001b44 <HAL_I2C_Init+0x1a0>)
 80019f8:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a52      	ldr	r2, [pc, #328]	@ (8001b48 <HAL_I2C_Init+0x1a4>)
 80019fe:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a52      	ldr	r2, [pc, #328]	@ (8001b4c <HAL_I2C_Init+0x1a8>)
 8001a04:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4f      	ldr	r2, [pc, #316]	@ (8001b50 <HAL_I2C_Init+0x1ac>)
 8001a12:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2224      	movs	r2, #36	@ 0x24
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	e006      	b.n	8001a78 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d108      	bne.n	8001a92 <HAL_I2C_Init+0xee>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	e007      	b.n	8001aa2 <HAL_I2C_Init+0xfe>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001aa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ab0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ab4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ac4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69d9      	ldr	r1, [r3, #28]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1a      	ldr	r2, [r3, #32]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	08001b89 	.word	0x08001b89
 8001b2c:	08001b9d 	.word	0x08001b9d
 8001b30:	08001bb1 	.word	0x08001bb1
 8001b34:	08001bc5 	.word	0x08001bc5
 8001b38:	08001bf5 	.word	0x08001bf5
 8001b3c:	08001c09 	.word	0x08001c09
 8001b40:	08001c1d 	.word	0x08001c1d
 8001b44:	08001c31 	.word	0x08001c31
 8001b48:	08001c45 	.word	0x08001c45
 8001b4c:	08001bd9 	.word	0x08001bd9
 8001b50:	0800052d 	.word	0x0800052d

08001b54 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	68f9      	ldr	r1, [r7, #12]
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4798      	blx	r3
  }
}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
 8001be4:	4613      	mov	r3, r2
 8001be6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b20      	cmp	r3, #32
 8001c6c:	d138      	bne.n	8001ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e032      	b.n	8001ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2224      	movs	r2, #36	@ 0x24
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e000      	b.n	8001ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
  }
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d139      	bne.n	8001d78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e033      	b.n	8001d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2224      	movs	r2, #36	@ 0x24
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0201 	bic.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	e000      	b.n	8001d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d78:	2302      	movs	r3, #2
  }
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d98:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f001 b823 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 817d 	beq.w	80020be <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dc4:	4bbc      	ldr	r3, [pc, #752]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d00c      	beq.n	8001dea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dd0:	4bb9      	ldr	r3, [pc, #740]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d15c      	bne.n	8001e96 <HAL_RCC_OscConfig+0x10e>
 8001ddc:	4bb6      	ldr	r3, [pc, #728]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de8:	d155      	bne.n	8001e96 <HAL_RCC_OscConfig+0x10e>
 8001dea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dee:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dfe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d102      	bne.n	8001e1c <HAL_RCC_OscConfig+0x94>
 8001e16:	4ba8      	ldr	r3, [pc, #672]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	e015      	b.n	8001e48 <HAL_RCC_OscConfig+0xc0>
 8001e1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e20:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001e30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e34:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001e38:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001e44:	4b9c      	ldr	r3, [pc, #624]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e4c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001e50:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001e54:	fa92 f2a2 	rbit	r2, r2
 8001e58:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001e5c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001e60:	fab2 f282 	clz	r2, r2
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f042 0220 	orr.w	r2, r2, #32
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f002 021f 	and.w	r2, r2, #31
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f202 	lsl.w	r2, r1, r2
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 811f 	beq.w	80020bc <HAL_RCC_OscConfig+0x334>
 8001e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 8116 	bne.w	80020bc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f000 bfaf 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
 8001ea8:	4b83      	ldr	r3, [pc, #524]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a82      	ldr	r2, [pc, #520]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	e036      	b.n	8001f24 <HAL_RCC_OscConfig+0x19c>
 8001eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x158>
 8001ec6:	4b7c      	ldr	r3, [pc, #496]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a7b      	ldr	r2, [pc, #492]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b79      	ldr	r3, [pc, #484]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a78      	ldr	r2, [pc, #480]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001ed8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e021      	b.n	8001f24 <HAL_RCC_OscConfig+0x19c>
 8001ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x184>
 8001ef2:	4b71      	ldr	r3, [pc, #452]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a70      	ldr	r2, [pc, #448]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b6e      	ldr	r3, [pc, #440]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6d      	ldr	r2, [pc, #436]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0x19c>
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a69      	ldr	r2, [pc, #420]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b67      	ldr	r3, [pc, #412]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a66      	ldr	r2, [pc, #408]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f22:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f24:	4b64      	ldr	r3, [pc, #400]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f28:	f023 020f 	bic.w	r2, r3, #15
 8001f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	495f      	ldr	r1, [pc, #380]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d059      	beq.n	8002002 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7fe fe13 	bl	8000b78 <HAL_GetTick>
 8001f52:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f58:	f7fe fe0e 	bl	8000b78 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	@ 0x64
 8001f66:	d902      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	f000 bf43 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
 8001f6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f72:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001f82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	095b      	lsrs	r3, r3, #5
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d102      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x218>
 8001f9a:	4b47      	ldr	r3, [pc, #284]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	e015      	b.n	8001fcc <HAL_RCC_OscConfig+0x244>
 8001fa0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fa4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001fb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fb8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001fbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fd0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001fd4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001fd8:	fa92 f2a2 	rbit	r2, r2
 8001fdc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001fe0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001fe4:	fab2 f282 	clz	r2, r2
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	f042 0220 	orr.w	r2, r2, #32
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	f002 021f 	and.w	r2, r2, #31
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0ab      	beq.n	8001f58 <HAL_RCC_OscConfig+0x1d0>
 8002000:	e05d      	b.n	80020be <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7fe fdb9 	bl	8000b78 <HAL_GetTick>
 8002006:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800200c:	f7fe fdb4 	bl	8000b78 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b64      	cmp	r3, #100	@ 0x64
 800201a:	d902      	bls.n	8002022 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	f000 bee9 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
 8002022:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002026:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002036:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0x2cc>
 800204e:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	e015      	b.n	8002080 <HAL_RCC_OscConfig+0x2f8>
 8002054:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002058:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002068:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800206c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002070:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800207c:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <HAL_RCC_OscConfig+0x330>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002084:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002088:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800208c:	fa92 f2a2 	rbit	r2, r2
 8002090:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002094:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002098:	fab2 f282 	clz	r2, r2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f042 0220 	orr.w	r2, r2, #32
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	f002 021f 	and.w	r2, r2, #31
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ab      	bne.n	800200c <HAL_RCC_OscConfig+0x284>
 80020b4:	e003      	b.n	80020be <HAL_RCC_OscConfig+0x336>
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 817d 	beq.w	80023ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020d4:	4ba6      	ldr	r3, [pc, #664]	@ (8002370 <HAL_RCC_OscConfig+0x5e8>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00b      	beq.n	80020f8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020e0:	4ba3      	ldr	r3, [pc, #652]	@ (8002370 <HAL_RCC_OscConfig+0x5e8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d172      	bne.n	80021d2 <HAL_RCC_OscConfig+0x44a>
 80020ec:	4ba0      	ldr	r3, [pc, #640]	@ (8002370 <HAL_RCC_OscConfig+0x5e8>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d16c      	bne.n	80021d2 <HAL_RCC_OscConfig+0x44a>
 80020f8:	2302      	movs	r3, #2
 80020fa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800210a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d102      	bne.n	8002128 <HAL_RCC_OscConfig+0x3a0>
 8002122:	4b93      	ldr	r3, [pc, #588]	@ (8002370 <HAL_RCC_OscConfig+0x5e8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	e013      	b.n	8002150 <HAL_RCC_OscConfig+0x3c8>
 8002128:	2302      	movs	r3, #2
 800212a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800213a:	2302      	movs	r3, #2
 800213c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002140:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800214c:	4b88      	ldr	r3, [pc, #544]	@ (8002370 <HAL_RCC_OscConfig+0x5e8>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002150:	2202      	movs	r2, #2
 8002152:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002156:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800215a:	fa92 f2a2 	rbit	r2, r2
 800215e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002162:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002166:	fab2 f282 	clz	r2, r2
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	f042 0220 	orr.w	r2, r2, #32
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	f002 021f 	and.w	r2, r2, #31
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f202 	lsl.w	r2, r1, r2
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCC_OscConfig+0x410>
 8002182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002186:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d002      	beq.n	8002198 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	f000 be2e 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002198:	4b75      	ldr	r3, [pc, #468]	@ (8002370 <HAL_RCC_OscConfig+0x5e8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	21f8      	movs	r1, #248	@ 0xf8
 80021ae:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80021b6:	fa91 f1a1 	rbit	r1, r1
 80021ba:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80021be:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80021c2:	fab1 f181 	clz	r1, r1
 80021c6:	b2c9      	uxtb	r1, r1
 80021c8:	408b      	lsls	r3, r1
 80021ca:	4969      	ldr	r1, [pc, #420]	@ (8002370 <HAL_RCC_OscConfig+0x5e8>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d0:	e0fd      	b.n	80023ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8088 	beq.w	80022f4 <HAL_RCC_OscConfig+0x56c>
 80021e4:	2301      	movs	r3, #1
 80021e6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80021f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002204:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	461a      	mov	r2, r3
 800220c:	2301      	movs	r3, #1
 800220e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fcb2 	bl	8000b78 <HAL_GetTick>
 8002214:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221a:	f7fe fcad 	bl	8000b78 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d902      	bls.n	8002230 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	f000 bde2 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
 8002230:	2302      	movs	r3, #2
 8002232:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002242:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <HAL_RCC_OscConfig+0x4d8>
 800225a:	4b45      	ldr	r3, [pc, #276]	@ (8002370 <HAL_RCC_OscConfig+0x5e8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	e013      	b.n	8002288 <HAL_RCC_OscConfig+0x500>
 8002260:	2302      	movs	r3, #2
 8002262:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002278:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002284:	4b3a      	ldr	r3, [pc, #232]	@ (8002370 <HAL_RCC_OscConfig+0x5e8>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002288:	2202      	movs	r2, #2
 800228a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800228e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002292:	fa92 f2a2 	rbit	r2, r2
 8002296:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800229a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800229e:	fab2 f282 	clz	r2, r2
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	f042 0220 	orr.w	r2, r2, #32
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	f002 021f 	and.w	r2, r2, #31
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f202 	lsl.w	r2, r1, r2
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0af      	beq.n	800221a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002370 <HAL_RCC_OscConfig+0x5e8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	21f8      	movs	r1, #248	@ 0xf8
 80022d0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80022d8:	fa91 f1a1 	rbit	r1, r1
 80022dc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80022e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80022e4:	fab1 f181 	clz	r1, r1
 80022e8:	b2c9      	uxtb	r1, r1
 80022ea:	408b      	lsls	r3, r1
 80022ec:	4920      	ldr	r1, [pc, #128]	@ (8002370 <HAL_RCC_OscConfig+0x5e8>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
 80022f2:	e06c      	b.n	80023ce <HAL_RCC_OscConfig+0x646>
 80022f4:	2301      	movs	r3, #1
 80022f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002306:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002314:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	461a      	mov	r2, r3
 800231c:	2300      	movs	r3, #0
 800231e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe fc2a 	bl	8000b78 <HAL_GetTick>
 8002324:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232a:	f7fe fc25 	bl	8000b78 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d902      	bls.n	8002340 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	f000 bd5a 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
 8002340:	2302      	movs	r3, #2
 8002342:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002352:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d104      	bne.n	8002374 <HAL_RCC_OscConfig+0x5ec>
 800236a:	4b01      	ldr	r3, [pc, #4]	@ (8002370 <HAL_RCC_OscConfig+0x5e8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	e015      	b.n	800239c <HAL_RCC_OscConfig+0x614>
 8002370:	40021000 	.word	0x40021000
 8002374:	2302      	movs	r3, #2
 8002376:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002386:	2302      	movs	r3, #2
 8002388:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800238c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002398:	4bc8      	ldr	r3, [pc, #800]	@ (80026bc <HAL_RCC_OscConfig+0x934>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	2202      	movs	r2, #2
 800239e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80023a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80023a6:	fa92 f2a2 	rbit	r2, r2
 80023aa:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80023ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80023b2:	fab2 f282 	clz	r2, r2
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	f042 0220 	orr.w	r2, r2, #32
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	f002 021f 	and.w	r2, r2, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f202 	lsl.w	r2, r1, r2
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ad      	bne.n	800232a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8110 	beq.w	8002604 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d079      	beq.n	80024e8 <HAL_RCC_OscConfig+0x760>
 80023f4:	2301      	movs	r3, #1
 80023f6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	4bab      	ldr	r3, [pc, #684]	@ (80026c0 <HAL_RCC_OscConfig+0x938>)
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	461a      	mov	r2, r3
 800241a:	2301      	movs	r3, #1
 800241c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7fe fbab 	bl	8000b78 <HAL_GetTick>
 8002422:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	e00a      	b.n	800243e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002428:	f7fe fba6 	bl	8000b78 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d902      	bls.n	800243e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	f000 bcdb 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
 800243e:	2302      	movs	r3, #2
 8002440:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002458:	2202      	movs	r2, #2
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002460:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	fa93 f2a3 	rbit	r2, r3
 800246a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800247c:	2202      	movs	r2, #2
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	fa93 f2a3 	rbit	r2, r3
 800248e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002492:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002496:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002498:	4b88      	ldr	r3, [pc, #544]	@ (80026bc <HAL_RCC_OscConfig+0x934>)
 800249a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80024a4:	2102      	movs	r1, #2
 80024a6:	6019      	str	r1, [r3, #0]
 80024a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	fa93 f1a3 	rbit	r1, r3
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024be:	6019      	str	r1, [r3, #0]
  return result;
 80024c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0a0      	beq.n	8002428 <HAL_RCC_OscConfig+0x6a0>
 80024e6:	e08d      	b.n	8002604 <HAL_RCC_OscConfig+0x87c>
 80024e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002506:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800250a:	601a      	str	r2, [r3, #0]
  return result;
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002514:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	4b68      	ldr	r3, [pc, #416]	@ (80026c0 <HAL_RCC_OscConfig+0x938>)
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	461a      	mov	r2, r3
 8002526:	2300      	movs	r3, #0
 8002528:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7fe fb25 	bl	8000b78 <HAL_GetTick>
 800252e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002534:	f7fe fb20 	bl	8000b78 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d902      	bls.n	800254a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	f000 bc55 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
 800254a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002552:	2202      	movs	r2, #2
 8002554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002568:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002572:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002576:	2202      	movs	r2, #2
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002596:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800259a:	2202      	movs	r2, #2
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80025b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b6:	4b41      	ldr	r3, [pc, #260]	@ (80026bc <HAL_RCC_OscConfig+0x934>)
 80025b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025be:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80025c2:	2102      	movs	r1, #2
 80025c4:	6019      	str	r1, [r3, #0]
 80025c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	fa93 f1a3 	rbit	r1, r3
 80025d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025dc:	6019      	str	r1, [r3, #0]
  return result;
 80025de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	2101      	movs	r1, #1
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d197      	bne.n	8002534 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002608:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 81a1 	beq.w	800295c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002620:	4b26      	ldr	r3, [pc, #152]	@ (80026bc <HAL_RCC_OscConfig+0x934>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d116      	bne.n	800265a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262c:	4b23      	ldr	r3, [pc, #140]	@ (80026bc <HAL_RCC_OscConfig+0x934>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4a22      	ldr	r2, [pc, #136]	@ (80026bc <HAL_RCC_OscConfig+0x934>)
 8002632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002636:	61d3      	str	r3, [r2, #28]
 8002638:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <HAL_RCC_OscConfig+0x934>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002644:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002652:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <HAL_RCC_OscConfig+0x93c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d11a      	bne.n	800269c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002666:	4b17      	ldr	r3, [pc, #92]	@ (80026c4 <HAL_RCC_OscConfig+0x93c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a16      	ldr	r2, [pc, #88]	@ (80026c4 <HAL_RCC_OscConfig+0x93c>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002670:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002672:	f7fe fa81 	bl	8000b78 <HAL_GetTick>
 8002676:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	e009      	b.n	8002690 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267c:	f7fe fa7c 	bl	8000b78 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b64      	cmp	r3, #100	@ 0x64
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e3b1      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <HAL_RCC_OscConfig+0x93c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ef      	beq.n	800267c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_OscConfig+0x940>
 80026ac:	4b03      	ldr	r3, [pc, #12]	@ (80026bc <HAL_RCC_OscConfig+0x934>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4a02      	ldr	r2, [pc, #8]	@ (80026bc <HAL_RCC_OscConfig+0x934>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6213      	str	r3, [r2, #32]
 80026b8:	e03c      	b.n	8002734 <HAL_RCC_OscConfig+0x9ac>
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	10908120 	.word	0x10908120
 80026c4:	40007000 	.word	0x40007000
 80026c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10c      	bne.n	80026f2 <HAL_RCC_OscConfig+0x96a>
 80026d8:	4bc1      	ldr	r3, [pc, #772]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4ac0      	ldr	r2, [pc, #768]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	4bbe      	ldr	r3, [pc, #760]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4abd      	ldr	r2, [pc, #756]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80026ea:	f023 0304 	bic.w	r3, r3, #4
 80026ee:	6213      	str	r3, [r2, #32]
 80026f0:	e020      	b.n	8002734 <HAL_RCC_OscConfig+0x9ac>
 80026f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x994>
 8002702:	4bb7      	ldr	r3, [pc, #732]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4ab6      	ldr	r2, [pc, #728]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6213      	str	r3, [r2, #32]
 800270e:	4bb4      	ldr	r3, [pc, #720]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4ab3      	ldr	r2, [pc, #716]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0x9ac>
 800271c:	4bb0      	ldr	r3, [pc, #704]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4aaf      	ldr	r2, [pc, #700]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6213      	str	r3, [r2, #32]
 8002728:	4bad      	ldr	r3, [pc, #692]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4aac      	ldr	r2, [pc, #688]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 800272e:	f023 0304 	bic.w	r3, r3, #4
 8002732:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002738:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8081 	beq.w	8002848 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7fe fa17 	bl	8000b78 <HAL_GetTick>
 800274a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe fa12 	bl	8000b78 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e345      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
 8002768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002770:	2202      	movs	r2, #2
 8002772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002778:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f2a3 	rbit	r2, r3
 8002782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002786:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002790:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002794:	2202      	movs	r2, #2
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027aa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027ae:	601a      	str	r2, [r3, #0]
  return result;
 80027b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_OscConfig+0xa4c>
 80027ce:	4b84      	ldr	r3, [pc, #528]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	e013      	b.n	80027fc <HAL_RCC_OscConfig+0xa74>
 80027d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80027dc:	2202      	movs	r2, #2
 80027de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	4b79      	ldr	r3, [pc, #484]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002800:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002804:	2102      	movs	r1, #2
 8002806:	6011      	str	r1, [r2, #0]
 8002808:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800280c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	fa92 f1a2 	rbit	r1, r2
 8002816:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800281a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800281e:	6011      	str	r1, [r2, #0]
  return result;
 8002820:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002824:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	fab2 f282 	clz	r2, r2
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f002 021f 	and.w	r2, r2, #31
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d084      	beq.n	8002750 <HAL_RCC_OscConfig+0x9c8>
 8002846:	e07f      	b.n	8002948 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002848:	f7fe f996 	bl	8000b78 <HAL_GetTick>
 800284c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002850:	e00b      	b.n	800286a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7fe f991 	bl	8000b78 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e2c4      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
 800286a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002872:	2202      	movs	r2, #2
 8002874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	fa93 f2a3 	rbit	r2, r3
 8002884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002888:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002892:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002896:	2202      	movs	r2, #2
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	fa93 f2a3 	rbit	r2, r3
 80028a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028b0:	601a      	str	r2, [r3, #0]
  return result;
 80028b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f043 0302 	orr.w	r3, r3, #2
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d102      	bne.n	80028d6 <HAL_RCC_OscConfig+0xb4e>
 80028d0:	4b43      	ldr	r3, [pc, #268]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	e013      	b.n	80028fe <HAL_RCC_OscConfig+0xb76>
 80028d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028da:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80028de:	2202      	movs	r2, #2
 80028e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	fa93 f2a3 	rbit	r2, r3
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	4b39      	ldr	r3, [pc, #228]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002902:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002906:	2102      	movs	r1, #2
 8002908:	6011      	str	r1, [r2, #0]
 800290a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800290e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	fa92 f1a2 	rbit	r1, r2
 8002918:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800291c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002920:	6011      	str	r1, [r2, #0]
  return result;
 8002922:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002926:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	f002 021f 	and.w	r2, r2, #31
 800293c:	2101      	movs	r1, #1
 800293e:	fa01 f202 	lsl.w	r2, r1, r2
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d184      	bne.n	8002852 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002948:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002950:	4b23      	ldr	r3, [pc, #140]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4a22      	ldr	r2, [pc, #136]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800295a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002960:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8242 	beq.w	8002df2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800296e:	4b1c      	ldr	r3, [pc, #112]	@ (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b08      	cmp	r3, #8
 8002978:	f000 8213 	beq.w	8002da2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002980:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	2b02      	cmp	r3, #2
 800298a:	f040 8162 	bne.w	8002c52 <HAL_RCC_OscConfig+0xeca>
 800298e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002992:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002996:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800299a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	fa93 f2a3 	rbit	r2, r3
 80029aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80029b2:	601a      	str	r2, [r3, #0]
  return result;
 80029b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80029bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	461a      	mov	r2, r3
 80029d0:	2300      	movs	r3, #0
 80029d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe f8d0 	bl	8000b78 <HAL_GetTick>
 80029d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029dc:	e00c      	b.n	80029f8 <HAL_RCC_OscConfig+0xc70>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe f8c8 	bl	8000b78 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1fd      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	fa93 f2a3 	rbit	r2, r3
 8002a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a18:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a1c:	601a      	str	r2, [r3, #0]
  return result;
 8002a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a22:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d102      	bne.n	8002a42 <HAL_RCC_OscConfig+0xcba>
 8002a3c:	4bb0      	ldr	r3, [pc, #704]	@ (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	e027      	b.n	8002a92 <HAL_RCC_OscConfig+0xd0a>
 8002a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a46:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002a4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a54:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	fa93 f2a3 	rbit	r2, r3
 8002a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a62:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002a70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	fa93 f2a3 	rbit	r2, r3
 8002a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a88:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	4b9c      	ldr	r3, [pc, #624]	@ (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a96:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002a9a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a9e:	6011      	str	r1, [r2, #0]
 8002aa0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aa4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	fa92 f1a2 	rbit	r1, r2
 8002aae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ab2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ab6:	6011      	str	r1, [r2, #0]
  return result;
 8002ab8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002abc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	fab2 f282 	clz	r2, r2
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	f042 0220 	orr.w	r2, r2, #32
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	f002 021f 	and.w	r2, r2, #31
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d182      	bne.n	80029e4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ade:	4b88      	ldr	r3, [pc, #544]	@ (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	430b      	orrs	r3, r1
 8002b00:	497f      	ldr	r1, [pc, #508]	@ (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
 8002b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002b0e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b18:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b2a:	601a      	str	r2, [r3, #0]
  return result;
 8002b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b30:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b34:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b40:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	461a      	mov	r2, r3
 8002b48:	2301      	movs	r3, #1
 8002b4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe f814 	bl	8000b78 <HAL_GetTick>
 8002b50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b54:	e009      	b.n	8002b6a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fe f80f 	bl	8000b78 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e144      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
 8002b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	fa93 f2a3 	rbit	r2, r3
 8002b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002b8e:	601a      	str	r2, [r3, #0]
  return result;
 8002b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b94:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002b98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d102      	bne.n	8002bb4 <HAL_RCC_OscConfig+0xe2c>
 8002bae:	4b54      	ldr	r3, [pc, #336]	@ (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	e027      	b.n	8002c04 <HAL_RCC_OscConfig+0xe7c>
 8002bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002bbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	fa93 f2a3 	rbit	r2, r3
 8002bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bde:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002be2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bec:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	fa93 f2a3 	rbit	r2, r3
 8002bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	4b3f      	ldr	r3, [pc, #252]	@ (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c08:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002c0c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c10:	6011      	str	r1, [r2, #0]
 8002c12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c16:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	fa92 f1a2 	rbit	r1, r2
 8002c20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c24:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c28:	6011      	str	r1, [r2, #0]
  return result;
 8002c2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c2e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	fab2 f282 	clz	r2, r2
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	f042 0220 	orr.w	r2, r2, #32
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	f002 021f 	and.w	r2, r2, #31
 8002c44:	2101      	movs	r1, #1
 8002c46:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d082      	beq.n	8002b56 <HAL_RCC_OscConfig+0xdce>
 8002c50:	e0cf      	b.n	8002df2 <HAL_RCC_OscConfig+0x106a>
 8002c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c56:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002c5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c64:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c72:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002c76:	601a      	str	r2, [r3, #0]
  return result;
 8002c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002c80:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c8c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	461a      	mov	r2, r3
 8002c94:	2300      	movs	r3, #0
 8002c96:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fd ff6e 	bl	8000b78 <HAL_GetTick>
 8002c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca0:	e009      	b.n	8002cb6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fd ff69 	bl	8000b78 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e09e      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
 8002cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cba:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002cbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	fa93 f2a3 	rbit	r2, r3
 8002cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002cda:	601a      	str	r2, [r3, #0]
  return result;
 8002cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002ce4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d104      	bne.n	8002d04 <HAL_RCC_OscConfig+0xf7c>
 8002cfa:	4b01      	ldr	r3, [pc, #4]	@ (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	e029      	b.n	8002d54 <HAL_RCC_OscConfig+0xfcc>
 8002d00:	40021000 	.word	0x40021000
 8002d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d08:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d16:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d24:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	fa93 f2a3 	rbit	r2, r3
 8002d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	4b2b      	ldr	r3, [pc, #172]	@ (8002e00 <HAL_RCC_OscConfig+0x1078>)
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d58:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002d5c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d60:	6011      	str	r1, [r2, #0]
 8002d62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d66:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	fa92 f1a2 	rbit	r1, r2
 8002d70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d74:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002d78:	6011      	str	r1, [r2, #0]
  return result;
 8002d7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d7e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	fab2 f282 	clz	r2, r2
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f042 0220 	orr.w	r2, r2, #32
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f002 021f 	and.w	r2, r2, #31
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d180      	bne.n	8002ca2 <HAL_RCC_OscConfig+0xf1a>
 8002da0:	e027      	b.n	8002df2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e01e      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002db6:	4b12      	ldr	r3, [pc, #72]	@ (8002e00 <HAL_RCC_OscConfig+0x1078>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dbe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002dc2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d10b      	bne.n	8002dee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002dd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002dda:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000

08002e04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b09e      	sub	sp, #120	@ 0x78
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e162      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b90      	ldr	r3, [pc, #576]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d910      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 0207 	bic.w	r2, r3, #7
 8002e32:	498b      	ldr	r1, [pc, #556]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b89      	ldr	r3, [pc, #548]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e14a      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e58:	4b82      	ldr	r3, [pc, #520]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	497f      	ldr	r1, [pc, #508]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80dc 	beq.w	8003030 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d13c      	bne.n	8002efa <HAL_RCC_ClockConfig+0xf6>
 8002e80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e84:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002e8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xa6>
 8002ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	e00f      	b.n	8002eca <HAL_RCC_ClockConfig+0xc6>
 8002eaa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002eae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002eb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ebc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ebe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ec6:	4b67      	ldr	r3, [pc, #412]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ece:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ed0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ed2:	fa92 f2a2 	rbit	r2, r2
 8002ed6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002ed8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002eda:	fab2 f282 	clz	r2, r2
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f042 0220 	orr.w	r2, r2, #32
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f002 021f 	and.w	r2, r2, #31
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d17b      	bne.n	8002fee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0f3      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d13c      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x178>
 8002f02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f06:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d102      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x128>
 8002f26:	4b4f      	ldr	r3, [pc, #316]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	e00f      	b.n	8002f4c <HAL_RCC_ClockConfig+0x148>
 8002f2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f48:	4b46      	ldr	r3, [pc, #280]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f50:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002f52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f54:	fa92 f2a2 	rbit	r2, r2
 8002f58:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002f5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f5c:	fab2 f282 	clz	r2, r2
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	f042 0220 	orr.w	r2, r2, #32
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	f002 021f 	and.w	r2, r2, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d13a      	bne.n	8002fee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b2      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x1a0>
 8002f9e:	4b31      	ldr	r3, [pc, #196]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	e00d      	b.n	8002fc0 <HAL_RCC_ClockConfig+0x1bc>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	623b      	str	r3, [r7, #32]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	4b29      	ldr	r3, [pc, #164]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	61ba      	str	r2, [r7, #24]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	fa92 f2a2 	rbit	r2, r2
 8002fca:	617a      	str	r2, [r7, #20]
  return result;
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	fab2 f282 	clz	r2, r2
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f042 0220 	orr.w	r2, r2, #32
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	f002 021f 	and.w	r2, r2, #31
 8002fde:	2101      	movs	r1, #1
 8002fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e079      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fee:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	491a      	ldr	r1, [pc, #104]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003000:	f7fd fdba 	bl	8000b78 <HAL_GetTick>
 8003004:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003008:	f7fd fdb6 	bl	8000b78 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e061      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	4b11      	ldr	r3, [pc, #68]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 020c 	and.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	429a      	cmp	r2, r3
 800302e:	d1eb      	bne.n	8003008 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003030:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d214      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 0207 	bic.w	r2, r3, #7
 8003046:	4906      	ldr	r1, [pc, #24]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e040      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
 8003060:	40022000 	.word	0x40022000
 8003064:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003074:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	491a      	ldr	r1, [pc, #104]	@ (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003092:	4b16      	ldr	r3, [pc, #88]	@ (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4912      	ldr	r1, [pc, #72]	@ (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030a6:	f000 f829 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030aa:	4601      	mov	r1, r0
 80030ac:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030b4:	22f0      	movs	r2, #240	@ 0xf0
 80030b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	fa92 f2a2 	rbit	r2, r2
 80030be:	60fa      	str	r2, [r7, #12]
  return result;
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	fab2 f282 	clz	r2, r2
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	40d3      	lsrs	r3, r2
 80030ca:	4a09      	ldr	r2, [pc, #36]	@ (80030f0 <HAL_RCC_ClockConfig+0x2ec>)
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	fa21 f303 	lsr.w	r3, r1, r3
 80030d2:	4a08      	ldr	r2, [pc, #32]	@ (80030f4 <HAL_RCC_ClockConfig+0x2f0>)
 80030d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030d6:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <HAL_RCC_ClockConfig+0x2f4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fb1a 	bl	8000714 <HAL_InitTick>
  
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3778      	adds	r7, #120	@ 0x78
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08007480 	.word	0x08007480
 80030f4:	20000000 	.word	0x20000000
 80030f8:	20000004 	.word	0x20000004

080030fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003116:	4b1e      	ldr	r3, [pc, #120]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x94>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b04      	cmp	r3, #4
 8003124:	d002      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x30>
 8003126:	2b08      	cmp	r3, #8
 8003128:	d003      	beq.n	8003132 <HAL_RCC_GetSysClockFreq+0x36>
 800312a:	e026      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800312c:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800312e:	613b      	str	r3, [r7, #16]
      break;
 8003130:	e026      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	0c9b      	lsrs	r3, r3, #18
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	4a17      	ldr	r2, [pc, #92]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x9c>)
 800313c:	5cd3      	ldrb	r3, [r2, r3]
 800313e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003140:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x94>)
 8003142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	4a14      	ldr	r2, [pc, #80]	@ (800319c <HAL_RCC_GetSysClockFreq+0xa0>)
 800314a:	5cd3      	ldrb	r3, [r2, r3]
 800314c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003158:	4a0e      	ldr	r2, [pc, #56]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	e004      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a0c      	ldr	r2, [pc, #48]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	613b      	str	r3, [r7, #16]
      break;
 8003178:	e002      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800317a:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800317c:	613b      	str	r3, [r7, #16]
      break;
 800317e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003180:	693b      	ldr	r3, [r7, #16]
}
 8003182:	4618      	mov	r0, r3
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	007a1200 	.word	0x007a1200
 8003198:	08007498 	.word	0x08007498
 800319c:	080074a8 	.word	0x080074a8
 80031a0:	003d0900 	.word	0x003d0900

080031a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a8:	4b03      	ldr	r3, [pc, #12]	@ (80031b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000000 	.word	0x20000000

080031bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031c2:	f7ff ffef 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031c6:	4601      	mov	r1, r0
 80031c8:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031d0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80031d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	fa92 f2a2 	rbit	r2, r2
 80031dc:	603a      	str	r2, [r7, #0]
  return result;
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	fab2 f282 	clz	r2, r2
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	40d3      	lsrs	r3, r2
 80031e8:	4a04      	ldr	r2, [pc, #16]	@ (80031fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80031ea:	5cd3      	ldrb	r3, [r2, r3]
 80031ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	08007490 	.word	0x08007490

08003200 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	220f      	movs	r2, #15
 800320e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003210:	4b12      	ldr	r3, [pc, #72]	@ (800325c <HAL_RCC_GetClockConfig+0x5c>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0203 	and.w	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800321c:	4b0f      	ldr	r3, [pc, #60]	@ (800325c <HAL_RCC_GetClockConfig+0x5c>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003228:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <HAL_RCC_GetClockConfig+0x5c>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003234:	4b09      	ldr	r3, [pc, #36]	@ (800325c <HAL_RCC_GetClockConfig+0x5c>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003242:	4b07      	ldr	r3, [pc, #28]	@ (8003260 <HAL_RCC_GetClockConfig+0x60>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0207 	and.w	r2, r3, #7
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
 8003260:	40022000 	.word	0x40022000

08003264 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b092      	sub	sp, #72	@ 0x48
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003274:	2300      	movs	r3, #0
 8003276:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80cd 	beq.w	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003288:	4b86      	ldr	r3, [pc, #536]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10e      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	4b83      	ldr	r3, [pc, #524]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4a82      	ldr	r2, [pc, #520]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800329a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329e:	61d3      	str	r3, [r2, #28]
 80032a0:	4b80      	ldr	r3, [pc, #512]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ac:	2301      	movs	r3, #1
 80032ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	4b7d      	ldr	r3, [pc, #500]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d118      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032be:	4b7a      	ldr	r3, [pc, #488]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a79      	ldr	r2, [pc, #484]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ca:	f7fd fc55 	bl	8000b78 <HAL_GetTick>
 80032ce:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	e008      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d2:	f7fd fc51 	bl	8000b78 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b64      	cmp	r3, #100	@ 0x64
 80032de:	d901      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e0db      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e4:	4b70      	ldr	r3, [pc, #448]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032f0:	4b6c      	ldr	r3, [pc, #432]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d07d      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003308:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800330a:	429a      	cmp	r2, r3
 800330c:	d076      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800330e:	4b65      	ldr	r3, [pc, #404]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003318:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800331c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	4b5e      	ldr	r3, [pc, #376]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	461a      	mov	r2, r3
 8003338:	2301      	movs	r3, #1
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003340:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800334a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	4b55      	ldr	r3, [pc, #340]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	461a      	mov	r2, r3
 800335c:	2300      	movs	r3, #0
 800335e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003360:	4a50      	ldr	r2, [pc, #320]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003364:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d045      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7fd fc02 	bl	8000b78 <HAL_GetTick>
 8003374:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003376:	e00a      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fd fbfe 	bl	8000b78 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e086      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800338e:	2302      	movs	r3, #2
 8003390:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
 800339a:	2302      	movs	r3, #2
 800339c:	623b      	str	r3, [r7, #32]
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	61fb      	str	r3, [r7, #28]
  return result;
 80033a6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f043 0302 	orr.w	r3, r3, #2
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d102      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033bc:	4b39      	ldr	r3, [pc, #228]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	e007      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80033c2:	2302      	movs	r3, #2
 80033c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	4b35      	ldr	r3, [pc, #212]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	2202      	movs	r2, #2
 80033d4:	613a      	str	r2, [r7, #16]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	fa92 f2a2 	rbit	r2, r2
 80033dc:	60fa      	str	r2, [r7, #12]
  return result;
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	fab2 f282 	clz	r2, r2
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	f002 021f 	and.w	r2, r2, #31
 80033f0:	2101      	movs	r1, #1
 80033f2:	fa01 f202 	lsl.w	r2, r1, r2
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0bd      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033fc:	4b29      	ldr	r3, [pc, #164]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4926      	ldr	r1, [pc, #152]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800340a:	4313      	orrs	r3, r2
 800340c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800340e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003412:	2b01      	cmp	r3, #1
 8003414:	d105      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003416:	4b23      	ldr	r3, [pc, #140]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	4a22      	ldr	r2, [pc, #136]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800341c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003420:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800342e:	4b1d      	ldr	r3, [pc, #116]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	f023 0203 	bic.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	491a      	ldr	r1, [pc, #104]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800343c:	4313      	orrs	r3, r2
 800343e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800344c:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003450:	f023 0210 	bic.w	r2, r3, #16
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4912      	ldr	r1, [pc, #72]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800345a:	4313      	orrs	r3, r2
 800345c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800346a:	4b0e      	ldr	r3, [pc, #56]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800346c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	490b      	ldr	r1, [pc, #44]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003478:	4313      	orrs	r3, r2
 800347a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003488:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	4903      	ldr	r1, [pc, #12]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003496:	4313      	orrs	r3, r2
 8003498:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3748      	adds	r7, #72	@ 0x48
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40007000 	.word	0x40007000
 80034ac:	10908100 	.word	0x10908100

080034b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e049      	b.n	8003556 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fa84 	bl	80009e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f000 fbfc 	bl	8003cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d001      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e040      	b.n	80035fa <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1c      	ldr	r2, [pc, #112]	@ (8003608 <HAL_TIM_Base_Start_IT+0xa8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00e      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x58>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a2:	d009      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x58>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a18      	ldr	r2, [pc, #96]	@ (800360c <HAL_TIM_Base_Start_IT+0xac>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x58>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a17      	ldr	r2, [pc, #92]	@ (8003610 <HAL_TIM_Base_Start_IT+0xb0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d115      	bne.n	80035e4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <HAL_TIM_Base_Start_IT+0xb4>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d015      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x96>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d0:	d011      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e2:	e008      	b.n	80035f6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e000      	b.n	80035f8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40000400 	.word	0x40000400
 8003610:	40014000 	.word	0x40014000
 8003614:	00010007 	.word	0x00010007

08003618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e049      	b.n	80036be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f841 	bl	80036c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f000 fb48 	bl	8003cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01b      	beq.n	800373e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f06f 0202 	mvn.w	r2, #2
 800370e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fac2 	bl	8003cae <HAL_TIM_IC_CaptureCallback>
 800372a:	e005      	b.n	8003738 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fab4 	bl	8003c9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fac5 	bl	8003cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d020      	beq.n	800378a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01b      	beq.n	800378a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f06f 0204 	mvn.w	r2, #4
 800375a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fa9c 	bl	8003cae <HAL_TIM_IC_CaptureCallback>
 8003776:	e005      	b.n	8003784 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fa8e 	bl	8003c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa9f 	bl	8003cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d01b      	beq.n	80037d6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f06f 0208 	mvn.w	r2, #8
 80037a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2204      	movs	r2, #4
 80037ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fa76 	bl	8003cae <HAL_TIM_IC_CaptureCallback>
 80037c2:	e005      	b.n	80037d0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fa68 	bl	8003c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fa79 	bl	8003cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d020      	beq.n	8003822 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01b      	beq.n	8003822 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f06f 0210 	mvn.w	r2, #16
 80037f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2208      	movs	r2, #8
 80037f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fa50 	bl	8003cae <HAL_TIM_IC_CaptureCallback>
 800380e:	e005      	b.n	800381c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fa42 	bl	8003c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa53 	bl	8003cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00c      	beq.n	8003846 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f06f 0201 	mvn.w	r2, #1
 800383e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7fc ff2a 	bl	800069a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00c      	beq.n	800386a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fef5 	bl	8004654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00c      	beq.n	800388e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 feed 	bl	8004668 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00c      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fa12 	bl	8003cd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00c      	beq.n	80038d6 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d007      	beq.n	80038d6 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f06f 0220 	mvn.w	r2, #32
 80038ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 feb5 	bl	8004640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e0ff      	b.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b14      	cmp	r3, #20
 800390a:	f200 80f0 	bhi.w	8003aee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800390e:	a201      	add	r2, pc, #4	@ (adr r2, 8003914 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003969 	.word	0x08003969
 8003918:	08003aef 	.word	0x08003aef
 800391c:	08003aef 	.word	0x08003aef
 8003920:	08003aef 	.word	0x08003aef
 8003924:	080039a9 	.word	0x080039a9
 8003928:	08003aef 	.word	0x08003aef
 800392c:	08003aef 	.word	0x08003aef
 8003930:	08003aef 	.word	0x08003aef
 8003934:	080039eb 	.word	0x080039eb
 8003938:	08003aef 	.word	0x08003aef
 800393c:	08003aef 	.word	0x08003aef
 8003940:	08003aef 	.word	0x08003aef
 8003944:	08003a2b 	.word	0x08003a2b
 8003948:	08003aef 	.word	0x08003aef
 800394c:	08003aef 	.word	0x08003aef
 8003950:	08003aef 	.word	0x08003aef
 8003954:	08003a6d 	.word	0x08003a6d
 8003958:	08003aef 	.word	0x08003aef
 800395c:	08003aef 	.word	0x08003aef
 8003960:	08003aef 	.word	0x08003aef
 8003964:	08003aad 	.word	0x08003aad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fa40 	bl	8003df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0208 	orr.w	r2, r2, #8
 8003982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0204 	bic.w	r2, r2, #4
 8003992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6999      	ldr	r1, [r3, #24]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	619a      	str	r2, [r3, #24]
      break;
 80039a6:	e0a5      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 faa6 	bl	8003f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6999      	ldr	r1, [r3, #24]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	021a      	lsls	r2, r3, #8
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	619a      	str	r2, [r3, #24]
      break;
 80039e8:	e084      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fb05 	bl	8004000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0208 	orr.w	r2, r2, #8
 8003a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0204 	bic.w	r2, r2, #4
 8003a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69d9      	ldr	r1, [r3, #28]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	61da      	str	r2, [r3, #28]
      break;
 8003a28:	e064      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fb63 	bl	80040fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69da      	ldr	r2, [r3, #28]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69d9      	ldr	r1, [r3, #28]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	021a      	lsls	r2, r3, #8
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	61da      	str	r2, [r3, #28]
      break;
 8003a6a:	e043      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fba6 	bl	80041c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0208 	orr.w	r2, r2, #8
 8003a86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0204 	bic.w	r2, r2, #4
 8003a96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003aaa:	e023      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fbe4 	bl	8004280 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ac6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	021a      	lsls	r2, r3, #8
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003aec:	e002      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	75fb      	strb	r3, [r7, #23]
      break;
 8003af2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop

08003b08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_ConfigClockSource+0x1c>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0b6      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x18a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b60:	d03e      	beq.n	8003be0 <HAL_TIM_ConfigClockSource+0xd8>
 8003b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b66:	f200 8087 	bhi.w	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b6e:	f000 8086 	beq.w	8003c7e <HAL_TIM_ConfigClockSource+0x176>
 8003b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b76:	d87f      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003b78:	2b70      	cmp	r3, #112	@ 0x70
 8003b7a:	d01a      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0xaa>
 8003b7c:	2b70      	cmp	r3, #112	@ 0x70
 8003b7e:	d87b      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003b80:	2b60      	cmp	r3, #96	@ 0x60
 8003b82:	d050      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x11e>
 8003b84:	2b60      	cmp	r3, #96	@ 0x60
 8003b86:	d877      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003b88:	2b50      	cmp	r3, #80	@ 0x50
 8003b8a:	d03c      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0xfe>
 8003b8c:	2b50      	cmp	r3, #80	@ 0x50
 8003b8e:	d873      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003b90:	2b40      	cmp	r3, #64	@ 0x40
 8003b92:	d058      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x13e>
 8003b94:	2b40      	cmp	r3, #64	@ 0x40
 8003b96:	d86f      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003b98:	2b30      	cmp	r3, #48	@ 0x30
 8003b9a:	d064      	beq.n	8003c66 <HAL_TIM_ConfigClockSource+0x15e>
 8003b9c:	2b30      	cmp	r3, #48	@ 0x30
 8003b9e:	d86b      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d060      	beq.n	8003c66 <HAL_TIM_ConfigClockSource+0x15e>
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d867      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d05c      	beq.n	8003c66 <HAL_TIM_ConfigClockSource+0x15e>
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d05a      	beq.n	8003c66 <HAL_TIM_ConfigClockSource+0x15e>
 8003bb0:	e062      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bc2:	f000 fc37 	bl	8004434 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	609a      	str	r2, [r3, #8]
      break;
 8003bde:	e04f      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bf0:	f000 fc20 	bl	8004434 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c02:	609a      	str	r2, [r3, #8]
      break;
 8003c04:	e03c      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c12:	461a      	mov	r2, r3
 8003c14:	f000 fb94 	bl	8004340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2150      	movs	r1, #80	@ 0x50
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fbed 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8003c24:	e02c      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c32:	461a      	mov	r2, r3
 8003c34:	f000 fbb3 	bl	800439e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2160      	movs	r1, #96	@ 0x60
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fbdd 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8003c44:	e01c      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c52:	461a      	mov	r2, r3
 8003c54:	f000 fb74 	bl	8004340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2140      	movs	r1, #64	@ 0x40
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fbcd 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8003c64:	e00c      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f000 fbc4 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8003c76:	e003      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c7c:	e000      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a38      	ldr	r2, [pc, #224]	@ (8003de0 <TIM_Base_SetConfig+0xf4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d007      	beq.n	8003d14 <TIM_Base_SetConfig+0x28>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0a:	d003      	beq.n	8003d14 <TIM_Base_SetConfig+0x28>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a35      	ldr	r2, [pc, #212]	@ (8003de4 <TIM_Base_SetConfig+0xf8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d108      	bne.n	8003d26 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a2d      	ldr	r2, [pc, #180]	@ (8003de0 <TIM_Base_SetConfig+0xf4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <TIM_Base_SetConfig+0x6a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d34:	d00f      	beq.n	8003d56 <TIM_Base_SetConfig+0x6a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a2a      	ldr	r2, [pc, #168]	@ (8003de4 <TIM_Base_SetConfig+0xf8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00b      	beq.n	8003d56 <TIM_Base_SetConfig+0x6a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a29      	ldr	r2, [pc, #164]	@ (8003de8 <TIM_Base_SetConfig+0xfc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <TIM_Base_SetConfig+0x6a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a28      	ldr	r2, [pc, #160]	@ (8003dec <TIM_Base_SetConfig+0x100>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <TIM_Base_SetConfig+0x6a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a27      	ldr	r2, [pc, #156]	@ (8003df0 <TIM_Base_SetConfig+0x104>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d108      	bne.n	8003d68 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a14      	ldr	r2, [pc, #80]	@ (8003de0 <TIM_Base_SetConfig+0xf4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00b      	beq.n	8003dac <TIM_Base_SetConfig+0xc0>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a14      	ldr	r2, [pc, #80]	@ (8003de8 <TIM_Base_SetConfig+0xfc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d007      	beq.n	8003dac <TIM_Base_SetConfig+0xc0>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a13      	ldr	r2, [pc, #76]	@ (8003dec <TIM_Base_SetConfig+0x100>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_Base_SetConfig+0xc0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a12      	ldr	r2, [pc, #72]	@ (8003df0 <TIM_Base_SetConfig+0x104>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d103      	bne.n	8003db4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d105      	bne.n	8003dd2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f023 0201 	bic.w	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	611a      	str	r2, [r3, #16]
  }
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40012c00 	.word	0x40012c00
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40014000 	.word	0x40014000
 8003dec:	40014400 	.word	0x40014400
 8003df0:	40014800 	.word	0x40014800

08003df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f023 0201 	bic.w	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f023 0302 	bic.w	r3, r3, #2
 8003e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a28      	ldr	r2, [pc, #160]	@ (8003ef0 <TIM_OC1_SetConfig+0xfc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00b      	beq.n	8003e6c <TIM_OC1_SetConfig+0x78>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a27      	ldr	r2, [pc, #156]	@ (8003ef4 <TIM_OC1_SetConfig+0x100>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d007      	beq.n	8003e6c <TIM_OC1_SetConfig+0x78>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a26      	ldr	r2, [pc, #152]	@ (8003ef8 <TIM_OC1_SetConfig+0x104>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_OC1_SetConfig+0x78>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a25      	ldr	r2, [pc, #148]	@ (8003efc <TIM_OC1_SetConfig+0x108>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d10c      	bne.n	8003e86 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0308 	bic.w	r3, r3, #8
 8003e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f023 0304 	bic.w	r3, r3, #4
 8003e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a19      	ldr	r2, [pc, #100]	@ (8003ef0 <TIM_OC1_SetConfig+0xfc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_OC1_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a18      	ldr	r2, [pc, #96]	@ (8003ef4 <TIM_OC1_SetConfig+0x100>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_OC1_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a17      	ldr	r2, [pc, #92]	@ (8003ef8 <TIM_OC1_SetConfig+0x104>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_OC1_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a16      	ldr	r2, [pc, #88]	@ (8003efc <TIM_OC1_SetConfig+0x108>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d111      	bne.n	8003eca <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	621a      	str	r2, [r3, #32]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40014000 	.word	0x40014000
 8003ef8:	40014400 	.word	0x40014400
 8003efc:	40014800 	.word	0x40014800

08003f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f023 0210 	bic.w	r2, r3, #16
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f023 0320 	bic.w	r3, r3, #32
 8003f4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a24      	ldr	r2, [pc, #144]	@ (8003ff0 <TIM_OC2_SetConfig+0xf0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d10d      	bne.n	8003f80 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff0 <TIM_OC2_SetConfig+0xf0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00b      	beq.n	8003fa0 <TIM_OC2_SetConfig+0xa0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff4 <TIM_OC2_SetConfig+0xf4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <TIM_OC2_SetConfig+0xa0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a19      	ldr	r2, [pc, #100]	@ (8003ff8 <TIM_OC2_SetConfig+0xf8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_OC2_SetConfig+0xa0>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a18      	ldr	r2, [pc, #96]	@ (8003ffc <TIM_OC2_SetConfig+0xfc>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d113      	bne.n	8003fc8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fa6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40014400 	.word	0x40014400
 8003ffc:	40014800 	.word	0x40014800

08004000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800402e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800404c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a23      	ldr	r2, [pc, #140]	@ (80040ec <TIM_OC3_SetConfig+0xec>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10d      	bne.n	800407e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800407c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a1a      	ldr	r2, [pc, #104]	@ (80040ec <TIM_OC3_SetConfig+0xec>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00b      	beq.n	800409e <TIM_OC3_SetConfig+0x9e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a19      	ldr	r2, [pc, #100]	@ (80040f0 <TIM_OC3_SetConfig+0xf0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <TIM_OC3_SetConfig+0x9e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a18      	ldr	r2, [pc, #96]	@ (80040f4 <TIM_OC3_SetConfig+0xf4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_OC3_SetConfig+0x9e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a17      	ldr	r2, [pc, #92]	@ (80040f8 <TIM_OC3_SetConfig+0xf8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d113      	bne.n	80040c6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	621a      	str	r2, [r3, #32]
}
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40014400 	.word	0x40014400
 80040f8:	40014800 	.word	0x40014800

080040fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800412a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800412e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800414a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	031b      	lsls	r3, r3, #12
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a16      	ldr	r2, [pc, #88]	@ (80041b4 <TIM_OC4_SetConfig+0xb8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00b      	beq.n	8004178 <TIM_OC4_SetConfig+0x7c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a15      	ldr	r2, [pc, #84]	@ (80041b8 <TIM_OC4_SetConfig+0xbc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d007      	beq.n	8004178 <TIM_OC4_SetConfig+0x7c>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a14      	ldr	r2, [pc, #80]	@ (80041bc <TIM_OC4_SetConfig+0xc0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_OC4_SetConfig+0x7c>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a13      	ldr	r2, [pc, #76]	@ (80041c0 <TIM_OC4_SetConfig+0xc4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d109      	bne.n	800418c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800417e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	019b      	lsls	r3, r3, #6
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40012c00 	.word	0x40012c00
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40014400 	.word	0x40014400
 80041c0:	40014800 	.word	0x40014800

080041c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004208:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	041b      	lsls	r3, r3, #16
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a15      	ldr	r2, [pc, #84]	@ (8004270 <TIM_OC5_SetConfig+0xac>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00b      	beq.n	8004236 <TIM_OC5_SetConfig+0x72>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a14      	ldr	r2, [pc, #80]	@ (8004274 <TIM_OC5_SetConfig+0xb0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d007      	beq.n	8004236 <TIM_OC5_SetConfig+0x72>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a13      	ldr	r2, [pc, #76]	@ (8004278 <TIM_OC5_SetConfig+0xb4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d003      	beq.n	8004236 <TIM_OC5_SetConfig+0x72>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a12      	ldr	r2, [pc, #72]	@ (800427c <TIM_OC5_SetConfig+0xb8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d109      	bne.n	800424a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800423c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	621a      	str	r2, [r3, #32]
}
 8004264:	bf00      	nop
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40014000 	.word	0x40014000
 8004278:	40014400 	.word	0x40014400
 800427c:	40014800 	.word	0x40014800

08004280 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	051b      	lsls	r3, r3, #20
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a16      	ldr	r2, [pc, #88]	@ (8004330 <TIM_OC6_SetConfig+0xb0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00b      	beq.n	80042f4 <TIM_OC6_SetConfig+0x74>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a15      	ldr	r2, [pc, #84]	@ (8004334 <TIM_OC6_SetConfig+0xb4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d007      	beq.n	80042f4 <TIM_OC6_SetConfig+0x74>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a14      	ldr	r2, [pc, #80]	@ (8004338 <TIM_OC6_SetConfig+0xb8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d003      	beq.n	80042f4 <TIM_OC6_SetConfig+0x74>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a13      	ldr	r2, [pc, #76]	@ (800433c <TIM_OC6_SetConfig+0xbc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d109      	bne.n	8004308 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	029b      	lsls	r3, r3, #10
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800

08004340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f023 0201 	bic.w	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800436a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 030a 	bic.w	r3, r3, #10
 800437c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	621a      	str	r2, [r3, #32]
}
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800439e:	b480      	push	{r7}
 80043a0:	b087      	sub	sp, #28
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	f023 0210 	bic.w	r2, r3, #16
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	031b      	lsls	r3, r3, #12
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	f043 0307 	orr.w	r3, r3, #7
 8004420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	609a      	str	r2, [r3, #8]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800444e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	021a      	lsls	r2, r3, #8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	431a      	orrs	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4313      	orrs	r3, r2
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	609a      	str	r2, [r3, #8]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004488:	2302      	movs	r3, #2
 800448a:	e054      	b.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a24      	ldr	r2, [pc, #144]	@ (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d108      	bne.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a17      	ldr	r2, [pc, #92]	@ (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00e      	beq.n	800450a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f4:	d009      	beq.n	800450a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a13      	ldr	r2, [pc, #76]	@ (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d004      	beq.n	800450a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a11      	ldr	r2, [pc, #68]	@ (800454c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d10c      	bne.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	4313      	orrs	r3, r2
 800451a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40012c00 	.word	0x40012c00
 8004548:	40000400 	.word	0x40000400
 800454c:	40014000 	.word	0x40014000

08004550 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004568:	2302      	movs	r3, #2
 800456a:	e060      	b.n	800462e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a14      	ldr	r2, [pc, #80]	@ (800463c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d115      	bne.n	800461c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	051b      	lsls	r3, r3, #20
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40012c00 	.word	0x40012c00

08004640 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004682:	f3ef 8305 	mrs	r3, IPSR
 8004686:	60bb      	str	r3, [r7, #8]
  return(result);
 8004688:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10f      	bne.n	80046ae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468e:	f3ef 8310 	mrs	r3, PRIMASK
 8004692:	607b      	str	r3, [r7, #4]
  return(result);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <osKernelInitialize+0x32>
 800469a:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <osKernelInitialize+0x64>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d109      	bne.n	80046b6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046a2:	f3ef 8311 	mrs	r3, BASEPRI
 80046a6:	603b      	str	r3, [r7, #0]
  return(result);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80046ae:	f06f 0305 	mvn.w	r3, #5
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	e00c      	b.n	80046d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046b6:	4b0a      	ldr	r3, [pc, #40]	@ (80046e0 <osKernelInitialize+0x64>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d105      	bne.n	80046ca <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80046be:	4b08      	ldr	r3, [pc, #32]	@ (80046e0 <osKernelInitialize+0x64>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	e002      	b.n	80046d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
 80046ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046d0:	68fb      	ldr	r3, [r7, #12]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000b10 	.word	0x20000b10

080046e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ea:	f3ef 8305 	mrs	r3, IPSR
 80046ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80046f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10f      	bne.n	8004716 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f6:	f3ef 8310 	mrs	r3, PRIMASK
 80046fa:	607b      	str	r3, [r7, #4]
  return(result);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <osKernelStart+0x32>
 8004702:	4b11      	ldr	r3, [pc, #68]	@ (8004748 <osKernelStart+0x64>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d109      	bne.n	800471e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800470a:	f3ef 8311 	mrs	r3, BASEPRI
 800470e:	603b      	str	r3, [r7, #0]
  return(result);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004716:	f06f 0305 	mvn.w	r3, #5
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	e00e      	b.n	800473c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800471e:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <osKernelStart+0x64>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d107      	bne.n	8004736 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004726:	4b08      	ldr	r3, [pc, #32]	@ (8004748 <osKernelStart+0x64>)
 8004728:	2202      	movs	r2, #2
 800472a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800472c:	f001 f86c 	bl	8005808 <vTaskStartScheduler>
      stat = osOK;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e002      	b.n	800473c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004736:	f04f 33ff 	mov.w	r3, #4294967295
 800473a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800473c:	68fb      	ldr	r3, [r7, #12]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000b10 	.word	0x20000b10

0800474c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b092      	sub	sp, #72	@ 0x48
 8004750:	af04      	add	r7, sp, #16
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800475c:	f3ef 8305 	mrs	r3, IPSR
 8004760:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004764:	2b00      	cmp	r3, #0
 8004766:	f040 8094 	bne.w	8004892 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476a:	f3ef 8310 	mrs	r3, PRIMASK
 800476e:	623b      	str	r3, [r7, #32]
  return(result);
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f040 808d 	bne.w	8004892 <osThreadNew+0x146>
 8004778:	4b48      	ldr	r3, [pc, #288]	@ (800489c <osThreadNew+0x150>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d106      	bne.n	800478e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004780:	f3ef 8311 	mrs	r3, BASEPRI
 8004784:	61fb      	str	r3, [r7, #28]
  return(result);
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f040 8082 	bne.w	8004892 <osThreadNew+0x146>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d07e      	beq.n	8004892 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004794:	2380      	movs	r3, #128	@ 0x80
 8004796:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004798:	2318      	movs	r3, #24
 800479a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800479c:	2300      	movs	r3, #0
 800479e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80047a0:	f107 031b 	add.w	r3, r7, #27
 80047a4:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80047a6:	f04f 33ff 	mov.w	r3, #4294967295
 80047aa:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d045      	beq.n	800483e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <osThreadNew+0x74>
        name = attr->name;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <osThreadNew+0x9a>
 80047d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d6:	2b38      	cmp	r3, #56	@ 0x38
 80047d8:	d805      	bhi.n	80047e6 <osThreadNew+0x9a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <osThreadNew+0x9e>
        return (NULL);
 80047e6:	2300      	movs	r3, #0
 80047e8:	e054      	b.n	8004894 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00e      	beq.n	8004820 <osThreadNew+0xd4>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	2ba7      	cmp	r3, #167	@ 0xa7
 8004808:	d90a      	bls.n	8004820 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800480e:	2b00      	cmp	r3, #0
 8004810:	d006      	beq.n	8004820 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <osThreadNew+0xd4>
        mem = 1;
 800481a:	2301      	movs	r3, #1
 800481c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800481e:	e010      	b.n	8004842 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10c      	bne.n	8004842 <osThreadNew+0xf6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d108      	bne.n	8004842 <osThreadNew+0xf6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d104      	bne.n	8004842 <osThreadNew+0xf6>
          mem = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800483c:	e001      	b.n	8004842 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8004842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004844:	2b01      	cmp	r3, #1
 8004846:	d110      	bne.n	800486a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004850:	9202      	str	r2, [sp, #8]
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800485c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fe1e 	bl	80054a0 <xTaskCreateStatic>
 8004864:	4603      	mov	r3, r0
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e013      	b.n	8004892 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800486a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486c:	2b00      	cmp	r3, #0
 800486e:	d110      	bne.n	8004892 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	b29a      	uxth	r2, r3
 8004874:	f107 0314 	add.w	r3, r7, #20
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 fe6b 	bl	800555e <xTaskCreate>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d001      	beq.n	8004892 <osThreadNew+0x146>
          hTask = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004892:	697b      	ldr	r3, [r7, #20]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3738      	adds	r7, #56	@ 0x38
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20000b10 	.word	0x20000b10

080048a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4a07      	ldr	r2, [pc, #28]	@ (80048cc <vApplicationGetIdleTaskMemory+0x2c>)
 80048b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4a06      	ldr	r2, [pc, #24]	@ (80048d0 <vApplicationGetIdleTaskMemory+0x30>)
 80048b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2280      	movs	r2, #128	@ 0x80
 80048bc:	601a      	str	r2, [r3, #0]
}
 80048be:	bf00      	nop
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000b14 	.word	0x20000b14
 80048d0:	20000bbc 	.word	0x20000bbc

080048d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a07      	ldr	r2, [pc, #28]	@ (8004900 <vApplicationGetTimerTaskMemory+0x2c>)
 80048e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4a06      	ldr	r2, [pc, #24]	@ (8004904 <vApplicationGetTimerTaskMemory+0x30>)
 80048ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048f2:	601a      	str	r2, [r3, #0]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	20000dbc 	.word	0x20000dbc
 8004904:	20000e64 	.word	0x20000e64

08004908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f103 0208 	add.w	r2, r3, #8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f04f 32ff 	mov.w	r2, #4294967295
 8004920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f103 0208 	add.w	r2, r3, #8
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f103 0208 	add.w	r2, r3, #8
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	601a      	str	r2, [r3, #0]
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049aa:	b480      	push	{r7}
 80049ac:	b085      	sub	sp, #20
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d103      	bne.n	80049ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e00c      	b.n	80049e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3308      	adds	r3, #8
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e002      	b.n	80049d8 <vListInsert+0x2e>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d2f6      	bcs.n	80049d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6892      	ldr	r2, [r2, #8]
 8004a32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6852      	ldr	r2, [r2, #4]
 8004a3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d103      	bne.n	8004a50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	1e5a      	subs	r2, r3, #1
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10b      	bne.n	8004a9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	e7fd      	b.n	8004a98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a9c:	f002 f8a4 	bl	8006be8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	441a      	add	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004acc:	3b01      	subs	r3, #1
 8004ace:	68f9      	ldr	r1, [r7, #12]
 8004ad0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	441a      	add	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	22ff      	movs	r2, #255	@ 0xff
 8004ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	22ff      	movs	r2, #255	@ 0xff
 8004ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d114      	bne.n	8004b1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01a      	beq.n	8004b30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3310      	adds	r3, #16
 8004afe:	4618      	mov	r0, r3
 8004b00:	f001 f926 	bl	8005d50 <xTaskRemoveFromEventList>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d012      	beq.n	8004b30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b40 <xQueueGenericReset+0xd0>)
 8004b0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	e009      	b.n	8004b30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3310      	adds	r3, #16
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff fef1 	bl	8004908 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3324      	adds	r3, #36	@ 0x24
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff feec 	bl	8004908 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b30:	f002 f88c 	bl	8006c4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b34:	2301      	movs	r3, #1
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08e      	sub	sp, #56	@ 0x38
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10b      	bne.n	8004b70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10b      	bne.n	8004b8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	e7fd      	b.n	8004b8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <xQueueGenericCreateStatic+0x56>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <xQueueGenericCreateStatic+0x5a>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <xQueueGenericCreateStatic+0x5c>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	623b      	str	r3, [r7, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <xQueueGenericCreateStatic+0x84>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <xQueueGenericCreateStatic+0x88>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <xQueueGenericCreateStatic+0x8a>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10b      	bne.n	8004bea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	61fb      	str	r3, [r7, #28]
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	e7fd      	b.n	8004be6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bea:	2350      	movs	r3, #80	@ 0x50
 8004bec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b50      	cmp	r3, #80	@ 0x50
 8004bf2:	d00b      	beq.n	8004c0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	61bb      	str	r3, [r7, #24]
}
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	e7fd      	b.n	8004c08 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00d      	beq.n	8004c32 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c1e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	4613      	mov	r3, r2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f805 	bl	8004c3c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3730      	adds	r7, #48	@ 0x30
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d103      	bne.n	8004c58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	e002      	b.n	8004c5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	69b8      	ldr	r0, [r7, #24]
 8004c6e:	f7ff feff 	bl	8004a70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	78fa      	ldrb	r2, [r7, #3]
 8004c76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c7a:	bf00      	nop
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08e      	sub	sp, #56	@ 0x38
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c92:	2300      	movs	r3, #0
 8004c94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <xQueueGenericSend+0x34>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <xQueueGenericSend+0x42>
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <xQueueGenericSend+0x46>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <xQueueGenericSend+0x48>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10b      	bne.n	8004ce8 <xQueueGenericSend+0x64>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ce2:	bf00      	nop
 8004ce4:	bf00      	nop
 8004ce6:	e7fd      	b.n	8004ce4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d103      	bne.n	8004cf6 <xQueueGenericSend+0x72>
 8004cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <xQueueGenericSend+0x76>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <xQueueGenericSend+0x78>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10b      	bne.n	8004d18 <xQueueGenericSend+0x94>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	623b      	str	r3, [r7, #32]
}
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
 8004d16:	e7fd      	b.n	8004d14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d18:	f001 f9e6 	bl	80060e8 <xTaskGetSchedulerState>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <xQueueGenericSend+0xa4>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <xQueueGenericSend+0xa8>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <xQueueGenericSend+0xaa>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10b      	bne.n	8004d4a <xQueueGenericSend+0xc6>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	61fb      	str	r3, [r7, #28]
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	e7fd      	b.n	8004d46 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d4a:	f001 ff4d 	bl	8006be8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <xQueueGenericSend+0xdc>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d129      	bne.n	8004db4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d66:	f000 fa2c 	bl	80051c2 <prvCopyDataToQueue>
 8004d6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d010      	beq.n	8004d96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d76:	3324      	adds	r3, #36	@ 0x24
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 ffe9 	bl	8005d50 <xTaskRemoveFromEventList>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d013      	beq.n	8004dac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d84:	4b3f      	ldr	r3, [pc, #252]	@ (8004e84 <xQueueGenericSend+0x200>)
 8004d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	e00a      	b.n	8004dac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d9c:	4b39      	ldr	r3, [pc, #228]	@ (8004e84 <xQueueGenericSend+0x200>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004dac:	f001 ff4e 	bl	8006c4c <vPortExitCritical>
				return pdPASS;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e063      	b.n	8004e7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d103      	bne.n	8004dc2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dba:	f001 ff47 	bl	8006c4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e05c      	b.n	8004e7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dc8:	f107 0314 	add.w	r3, r7, #20
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f001 f823 	bl	8005e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dd6:	f001 ff39 	bl	8006c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dda:	f000 fd85 	bl	80058e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dde:	f001 ff03 	bl	8006be8 <vPortEnterCritical>
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004de8:	b25b      	sxtb	r3, r3
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d103      	bne.n	8004df8 <xQueueGenericSend+0x174>
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dfe:	b25b      	sxtb	r3, r3
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e04:	d103      	bne.n	8004e0e <xQueueGenericSend+0x18a>
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e0e:	f001 ff1d 	bl	8006c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e12:	1d3a      	adds	r2, r7, #4
 8004e14:	f107 0314 	add.w	r3, r7, #20
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f001 f812 	bl	8005e44 <xTaskCheckForTimeOut>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d124      	bne.n	8004e70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e28:	f000 fac3 	bl	80053b2 <prvIsQueueFull>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d018      	beq.n	8004e64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e34:	3310      	adds	r3, #16
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 ff36 	bl	8005cac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e42:	f000 fa4e 	bl	80052e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e46:	f000 fd5d 	bl	8005904 <xTaskResumeAll>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f47f af7c 	bne.w	8004d4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e52:	4b0c      	ldr	r3, [pc, #48]	@ (8004e84 <xQueueGenericSend+0x200>)
 8004e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	e772      	b.n	8004d4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e66:	f000 fa3c 	bl	80052e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e6a:	f000 fd4b 	bl	8005904 <xTaskResumeAll>
 8004e6e:	e76c      	b.n	8004d4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e72:	f000 fa36 	bl	80052e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e76:	f000 fd45 	bl	8005904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e7a:	2300      	movs	r3, #0
		}
	}
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3738      	adds	r7, #56	@ 0x38
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08e      	sub	sp, #56	@ 0x38
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d103      	bne.n	8004ec6 <xQueueGenericSendFromISR+0x3e>
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <xQueueGenericSendFromISR+0x42>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <xQueueGenericSendFromISR+0x44>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	623b      	str	r3, [r7, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d103      	bne.n	8004ef6 <xQueueGenericSendFromISR+0x6e>
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <xQueueGenericSendFromISR+0x72>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <xQueueGenericSendFromISR+0x74>
 8004efa:	2300      	movs	r3, #0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10b      	bne.n	8004f18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	61fb      	str	r3, [r7, #28]
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	e7fd      	b.n	8004f14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f18:	f001 ff46 	bl	8006da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f1c:	f3ef 8211 	mrs	r2, BASEPRI
 8004f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	61ba      	str	r2, [r7, #24]
 8004f32:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f34:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d302      	bcc.n	8004f4a <xQueueGenericSendFromISR+0xc2>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d12c      	bne.n	8004fa4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f5a:	f000 f932 	bl	80051c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f5e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f66:	d112      	bne.n	8004f8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d016      	beq.n	8004f9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f72:	3324      	adds	r3, #36	@ 0x24
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 feeb 	bl	8005d50 <xTaskRemoveFromEventList>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00e      	beq.n	8004f9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00b      	beq.n	8004f9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	e007      	b.n	8004f9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f92:	3301      	adds	r3, #1
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	b25a      	sxtb	r2, r3
 8004f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004fa2:	e001      	b.n	8004fa8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004faa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3738      	adds	r7, #56	@ 0x38
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08c      	sub	sp, #48	@ 0x30
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10b      	bne.n	8004ff2 <xQueueReceive+0x32>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	623b      	str	r3, [r7, #32]
}
 8004fec:	bf00      	nop
 8004fee:	bf00      	nop
 8004ff0:	e7fd      	b.n	8004fee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d103      	bne.n	8005000 <xQueueReceive+0x40>
 8004ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <xQueueReceive+0x44>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <xQueueReceive+0x46>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <xQueueReceive+0x62>
	__asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	61fb      	str	r3, [r7, #28]
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	e7fd      	b.n	800501e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005022:	f001 f861 	bl	80060e8 <xTaskGetSchedulerState>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d102      	bne.n	8005032 <xQueueReceive+0x72>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <xQueueReceive+0x76>
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <xQueueReceive+0x78>
 8005036:	2300      	movs	r3, #0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10b      	bne.n	8005054 <xQueueReceive+0x94>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	61bb      	str	r3, [r7, #24]
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	e7fd      	b.n	8005050 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005054:	f001 fdc8 	bl	8006be8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01f      	beq.n	80050a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005068:	f000 f915 	bl	8005296 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	1e5a      	subs	r2, r3, #1
 8005070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005072:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00f      	beq.n	800509c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800507c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507e:	3310      	adds	r3, #16
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fe65 	bl	8005d50 <xTaskRemoveFromEventList>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800508c:	4b3c      	ldr	r3, [pc, #240]	@ (8005180 <xQueueReceive+0x1c0>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800509c:	f001 fdd6 	bl	8006c4c <vPortExitCritical>
				return pdPASS;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e069      	b.n	8005178 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050aa:	f001 fdcf 	bl	8006c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050ae:	2300      	movs	r3, #0
 80050b0:	e062      	b.n	8005178 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050b8:	f107 0310 	add.w	r3, r7, #16
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 feab 	bl	8005e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050c2:	2301      	movs	r3, #1
 80050c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050c6:	f001 fdc1 	bl	8006c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050ca:	f000 fc0d 	bl	80058e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050ce:	f001 fd8b 	bl	8006be8 <vPortEnterCritical>
 80050d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050d8:	b25b      	sxtb	r3, r3
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d103      	bne.n	80050e8 <xQueueReceive+0x128>
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050ee:	b25b      	sxtb	r3, r3
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d103      	bne.n	80050fe <xQueueReceive+0x13e>
 80050f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050fe:	f001 fda5 	bl	8006c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005102:	1d3a      	adds	r2, r7, #4
 8005104:	f107 0310 	add.w	r3, r7, #16
 8005108:	4611      	mov	r1, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fe9a 	bl	8005e44 <xTaskCheckForTimeOut>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d123      	bne.n	800515e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005118:	f000 f935 	bl	8005386 <prvIsQueueEmpty>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d017      	beq.n	8005152 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005124:	3324      	adds	r3, #36	@ 0x24
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fdbe 	bl	8005cac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005132:	f000 f8d6 	bl	80052e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005136:	f000 fbe5 	bl	8005904 <xTaskResumeAll>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d189      	bne.n	8005054 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005140:	4b0f      	ldr	r3, [pc, #60]	@ (8005180 <xQueueReceive+0x1c0>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	e780      	b.n	8005054 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005154:	f000 f8c5 	bl	80052e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005158:	f000 fbd4 	bl	8005904 <xTaskResumeAll>
 800515c:	e77a      	b.n	8005054 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800515e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005160:	f000 f8bf 	bl	80052e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005164:	f000 fbce 	bl	8005904 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005168:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800516a:	f000 f90c 	bl	8005386 <prvIsQueueEmpty>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	f43f af6f 	beq.w	8005054 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005176:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005178:	4618      	mov	r0, r3
 800517a:	3730      	adds	r7, #48	@ 0x30
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	e000ed04 	.word	0xe000ed04

08005184 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10b      	bne.n	80051aa <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	60bb      	str	r3, [r7, #8]
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	e7fd      	b.n	80051a6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80051aa:	f001 fd1d 	bl	8006be8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80051b4:	f001 fd4a 	bl	8006c4c <vPortExitCritical>

	return uxReturn;
 80051b8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b086      	sub	sp, #24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10d      	bne.n	80051fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d14d      	bne.n	8005284 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 ff99 	bl	8006124 <xTaskPriorityDisinherit>
 80051f2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	605a      	str	r2, [r3, #4]
 80051fa:	e043      	b.n	8005284 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d119      	bne.n	8005236 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6898      	ldr	r0, [r3, #8]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	461a      	mov	r2, r3
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	f002 f871 	bl	80072f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	441a      	add	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	429a      	cmp	r2, r3
 800522a:	d32b      	bcc.n	8005284 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	609a      	str	r2, [r3, #8]
 8005234:	e026      	b.n	8005284 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	68d8      	ldr	r0, [r3, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	461a      	mov	r2, r3
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	f002 f857 	bl	80072f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	425b      	negs	r3, r3
 8005250:	441a      	add	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d207      	bcs.n	8005272 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	425b      	negs	r3, r3
 800526c:	441a      	add	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b02      	cmp	r3, #2
 8005276:	d105      	bne.n	8005284 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	3b01      	subs	r3, #1
 8005282:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800528c:	697b      	ldr	r3, [r7, #20]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d018      	beq.n	80052da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b0:	441a      	add	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d303      	bcc.n	80052ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68d9      	ldr	r1, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	461a      	mov	r2, r3
 80052d4:	6838      	ldr	r0, [r7, #0]
 80052d6:	f002 f80d 	bl	80072f4 <memcpy>
	}
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052ea:	f001 fc7d 	bl	8006be8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052f6:	e011      	b.n	800531c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d012      	beq.n	8005326 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3324      	adds	r3, #36	@ 0x24
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fd23 	bl	8005d50 <xTaskRemoveFromEventList>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005310:	f000 fdfc 	bl	8005f0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	3b01      	subs	r3, #1
 8005318:	b2db      	uxtb	r3, r3
 800531a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800531c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005320:	2b00      	cmp	r3, #0
 8005322:	dce9      	bgt.n	80052f8 <prvUnlockQueue+0x16>
 8005324:	e000      	b.n	8005328 <prvUnlockQueue+0x46>
					break;
 8005326:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	22ff      	movs	r2, #255	@ 0xff
 800532c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005330:	f001 fc8c 	bl	8006c4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005334:	f001 fc58 	bl	8006be8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800533e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005340:	e011      	b.n	8005366 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d012      	beq.n	8005370 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3310      	adds	r3, #16
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fcfe 	bl	8005d50 <xTaskRemoveFromEventList>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800535a:	f000 fdd7 	bl	8005f0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800535e:	7bbb      	ldrb	r3, [r7, #14]
 8005360:	3b01      	subs	r3, #1
 8005362:	b2db      	uxtb	r3, r3
 8005364:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005366:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800536a:	2b00      	cmp	r3, #0
 800536c:	dce9      	bgt.n	8005342 <prvUnlockQueue+0x60>
 800536e:	e000      	b.n	8005372 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005370:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	22ff      	movs	r2, #255	@ 0xff
 8005376:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800537a:	f001 fc67 	bl	8006c4c <vPortExitCritical>
}
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800538e:	f001 fc2b 	bl	8006be8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005396:	2b00      	cmp	r3, #0
 8005398:	d102      	bne.n	80053a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800539a:	2301      	movs	r3, #1
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e001      	b.n	80053a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053a4:	f001 fc52 	bl	8006c4c <vPortExitCritical>

	return xReturn;
 80053a8:	68fb      	ldr	r3, [r7, #12]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053ba:	f001 fc15 	bl	8006be8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d102      	bne.n	80053d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053ca:	2301      	movs	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	e001      	b.n	80053d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053d4:	f001 fc3a 	bl	8006c4c <vPortExitCritical>

	return xReturn;
 80053d8:	68fb      	ldr	r3, [r7, #12]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	e014      	b.n	800541e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053f4:	4a0f      	ldr	r2, [pc, #60]	@ (8005434 <vQueueAddToRegistry+0x50>)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10b      	bne.n	8005418 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005400:	490c      	ldr	r1, [pc, #48]	@ (8005434 <vQueueAddToRegistry+0x50>)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800540a:	4a0a      	ldr	r2, [pc, #40]	@ (8005434 <vQueueAddToRegistry+0x50>)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4413      	add	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005416:	e006      	b.n	8005426 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3301      	adds	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b07      	cmp	r3, #7
 8005422:	d9e7      	bls.n	80053f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20001264 	.word	0x20001264

08005438 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005448:	f001 fbce 	bl	8006be8 <vPortEnterCritical>
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005452:	b25b      	sxtb	r3, r3
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d103      	bne.n	8005462 <vQueueWaitForMessageRestricted+0x2a>
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005468:	b25b      	sxtb	r3, r3
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d103      	bne.n	8005478 <vQueueWaitForMessageRestricted+0x40>
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005478:	f001 fbe8 	bl	8006c4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	3324      	adds	r3, #36	@ 0x24
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fc33 	bl	8005cf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005492:	6978      	ldr	r0, [r7, #20]
 8005494:	f7ff ff25 	bl	80052e2 <prvUnlockQueue>
	}
 8005498:	bf00      	nop
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08e      	sub	sp, #56	@ 0x38
 80054a4:	af04      	add	r7, sp, #16
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10b      	bne.n	80054cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	623b      	str	r3, [r7, #32]
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	e7fd      	b.n	80054c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80054cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	61fb      	str	r3, [r7, #28]
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	e7fd      	b.n	80054e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054ea:	23a8      	movs	r3, #168	@ 0xa8
 80054ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2ba8      	cmp	r3, #168	@ 0xa8
 80054f2:	d00b      	beq.n	800550c <xTaskCreateStatic+0x6c>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	61bb      	str	r3, [r7, #24]
}
 8005506:	bf00      	nop
 8005508:	bf00      	nop
 800550a:	e7fd      	b.n	8005508 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800550c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550e:	2b00      	cmp	r3, #0
 8005510:	d01e      	beq.n	8005550 <xTaskCreateStatic+0xb0>
 8005512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01b      	beq.n	8005550 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005520:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	2202      	movs	r2, #2
 8005526:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800552a:	2300      	movs	r3, #0
 800552c:	9303      	str	r3, [sp, #12]
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	9302      	str	r3, [sp, #8]
 8005532:	f107 0314 	add.w	r3, r7, #20
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f850 	bl	80055e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005548:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800554a:	f000 f8ed 	bl	8005728 <prvAddNewTaskToReadyList>
 800554e:	e001      	b.n	8005554 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005554:	697b      	ldr	r3, [r7, #20]
	}
 8005556:	4618      	mov	r0, r3
 8005558:	3728      	adds	r7, #40	@ 0x28
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800555e:	b580      	push	{r7, lr}
 8005560:	b08c      	sub	sp, #48	@ 0x30
 8005562:	af04      	add	r7, sp, #16
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800556e:	88fb      	ldrh	r3, [r7, #6]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4618      	mov	r0, r3
 8005574:	f001 fc5a 	bl	8006e2c <pvPortMalloc>
 8005578:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00e      	beq.n	800559e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005580:	20a8      	movs	r0, #168	@ 0xa8
 8005582:	f001 fc53 	bl	8006e2c <pvPortMalloc>
 8005586:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	631a      	str	r2, [r3, #48]	@ 0x30
 8005594:	e005      	b.n	80055a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005596:	6978      	ldr	r0, [r7, #20]
 8005598:	f001 fd10 	bl	8006fbc <vPortFree>
 800559c:	e001      	b.n	80055a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800559e:	2300      	movs	r3, #0
 80055a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d017      	beq.n	80055d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	2300      	movs	r3, #0
 80055b4:	9303      	str	r3, [sp, #12]
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	9302      	str	r3, [sp, #8]
 80055ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f80e 	bl	80055e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055cc:	69f8      	ldr	r0, [r7, #28]
 80055ce:	f000 f8ab 	bl	8005728 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055d2:	2301      	movs	r3, #1
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	e002      	b.n	80055de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055d8:	f04f 33ff 	mov.w	r3, #4294967295
 80055dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055de:	69bb      	ldr	r3, [r7, #24]
	}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3720      	adds	r7, #32
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	461a      	mov	r2, r3
 8005600:	21a5      	movs	r1, #165	@ 0xa5
 8005602:	f001 fdf3 	bl	80071ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005610:	3b01      	subs	r3, #1
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	f023 0307 	bic.w	r3, r3, #7
 800561e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00b      	beq.n	8005642 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	617b      	str	r3, [r7, #20]
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	e7fd      	b.n	800563e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
 8005646:	e012      	b.n	800566e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	7819      	ldrb	r1, [r3, #0]
 8005650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4413      	add	r3, r2
 8005656:	3334      	adds	r3, #52	@ 0x34
 8005658:	460a      	mov	r2, r1
 800565a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d006      	beq.n	8005676 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	3301      	adds	r3, #1
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	2b0f      	cmp	r3, #15
 8005672:	d9e9      	bls.n	8005648 <prvInitialiseNewTask+0x60>
 8005674:	e000      	b.n	8005678 <prvInitialiseNewTask+0x90>
		{
			break;
 8005676:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005682:	2b37      	cmp	r3, #55	@ 0x37
 8005684:	d901      	bls.n	800568a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005686:	2337      	movs	r3, #55	@ 0x37
 8005688:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800568a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800568e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005694:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005698:	2200      	movs	r2, #0
 800569a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800569c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569e:	3304      	adds	r3, #4
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff f951 	bl	8004948 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	3318      	adds	r3, #24
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff f94c 	bl	8004948 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80056d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d8:	3354      	adds	r3, #84	@ 0x54
 80056da:	224c      	movs	r2, #76	@ 0x4c
 80056dc:	2100      	movs	r1, #0
 80056de:	4618      	mov	r0, r3
 80056e0:	f001 fd84 	bl	80071ec <memset>
 80056e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e6:	4a0d      	ldr	r2, [pc, #52]	@ (800571c <prvInitialiseNewTask+0x134>)
 80056e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80056ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005720 <prvInitialiseNewTask+0x138>)
 80056ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80056f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005724 <prvInitialiseNewTask+0x13c>)
 80056f4:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	68f9      	ldr	r1, [r7, #12]
 80056fa:	69b8      	ldr	r0, [r7, #24]
 80056fc:	f001 f942 	bl	8006984 <pxPortInitialiseStack>
 8005700:	4602      	mov	r2, r0
 8005702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005704:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800570c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005712:	bf00      	nop
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	200024f0 	.word	0x200024f0
 8005720:	20002558 	.word	0x20002558
 8005724:	200025c0 	.word	0x200025c0

08005728 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005730:	f001 fa5a 	bl	8006be8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005734:	4b2d      	ldr	r3, [pc, #180]	@ (80057ec <prvAddNewTaskToReadyList+0xc4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3301      	adds	r3, #1
 800573a:	4a2c      	ldr	r2, [pc, #176]	@ (80057ec <prvAddNewTaskToReadyList+0xc4>)
 800573c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800573e:	4b2c      	ldr	r3, [pc, #176]	@ (80057f0 <prvAddNewTaskToReadyList+0xc8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005746:	4a2a      	ldr	r2, [pc, #168]	@ (80057f0 <prvAddNewTaskToReadyList+0xc8>)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800574c:	4b27      	ldr	r3, [pc, #156]	@ (80057ec <prvAddNewTaskToReadyList+0xc4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d110      	bne.n	8005776 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005754:	f000 fbfe 	bl	8005f54 <prvInitialiseTaskLists>
 8005758:	e00d      	b.n	8005776 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800575a:	4b26      	ldr	r3, [pc, #152]	@ (80057f4 <prvAddNewTaskToReadyList+0xcc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005762:	4b23      	ldr	r3, [pc, #140]	@ (80057f0 <prvAddNewTaskToReadyList+0xc8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	429a      	cmp	r2, r3
 800576e:	d802      	bhi.n	8005776 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005770:	4a1f      	ldr	r2, [pc, #124]	@ (80057f0 <prvAddNewTaskToReadyList+0xc8>)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005776:	4b20      	ldr	r3, [pc, #128]	@ (80057f8 <prvAddNewTaskToReadyList+0xd0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	4a1e      	ldr	r2, [pc, #120]	@ (80057f8 <prvAddNewTaskToReadyList+0xd0>)
 800577e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005780:	4b1d      	ldr	r3, [pc, #116]	@ (80057f8 <prvAddNewTaskToReadyList+0xd0>)
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800578c:	4b1b      	ldr	r3, [pc, #108]	@ (80057fc <prvAddNewTaskToReadyList+0xd4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d903      	bls.n	800579c <prvAddNewTaskToReadyList+0x74>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	4a18      	ldr	r2, [pc, #96]	@ (80057fc <prvAddNewTaskToReadyList+0xd4>)
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4a15      	ldr	r2, [pc, #84]	@ (8005800 <prvAddNewTaskToReadyList+0xd8>)
 80057aa:	441a      	add	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f7ff f8d5 	bl	8004962 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057b8:	f001 fa48 	bl	8006c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057bc:	4b0d      	ldr	r3, [pc, #52]	@ (80057f4 <prvAddNewTaskToReadyList+0xcc>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00e      	beq.n	80057e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057c4:	4b0a      	ldr	r3, [pc, #40]	@ (80057f0 <prvAddNewTaskToReadyList+0xc8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d207      	bcs.n	80057e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005804 <prvAddNewTaskToReadyList+0xdc>)
 80057d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20001778 	.word	0x20001778
 80057f0:	200012a4 	.word	0x200012a4
 80057f4:	20001784 	.word	0x20001784
 80057f8:	20001794 	.word	0x20001794
 80057fc:	20001780 	.word	0x20001780
 8005800:	200012a8 	.word	0x200012a8
 8005804:	e000ed04 	.word	0xe000ed04

08005808 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	@ 0x28
 800580c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005816:	463a      	mov	r2, r7
 8005818:	1d39      	adds	r1, r7, #4
 800581a:	f107 0308 	add.w	r3, r7, #8
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff f83e 	bl	80048a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	9202      	str	r2, [sp, #8]
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	2300      	movs	r3, #0
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	2300      	movs	r3, #0
 8005834:	460a      	mov	r2, r1
 8005836:	4924      	ldr	r1, [pc, #144]	@ (80058c8 <vTaskStartScheduler+0xc0>)
 8005838:	4824      	ldr	r0, [pc, #144]	@ (80058cc <vTaskStartScheduler+0xc4>)
 800583a:	f7ff fe31 	bl	80054a0 <xTaskCreateStatic>
 800583e:	4603      	mov	r3, r0
 8005840:	4a23      	ldr	r2, [pc, #140]	@ (80058d0 <vTaskStartScheduler+0xc8>)
 8005842:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005844:	4b22      	ldr	r3, [pc, #136]	@ (80058d0 <vTaskStartScheduler+0xc8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800584c:	2301      	movs	r3, #1
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e001      	b.n	8005856 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d102      	bne.n	8005862 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800585c:	f000 fd72 	bl	8006344 <xTimerCreateTimerTask>
 8005860:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d11b      	bne.n	80058a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	613b      	str	r3, [r7, #16]
}
 800587a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800587c:	4b15      	ldr	r3, [pc, #84]	@ (80058d4 <vTaskStartScheduler+0xcc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3354      	adds	r3, #84	@ 0x54
 8005882:	4a15      	ldr	r2, [pc, #84]	@ (80058d8 <vTaskStartScheduler+0xd0>)
 8005884:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005886:	4b15      	ldr	r3, [pc, #84]	@ (80058dc <vTaskStartScheduler+0xd4>)
 8005888:	f04f 32ff 	mov.w	r2, #4294967295
 800588c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800588e:	4b14      	ldr	r3, [pc, #80]	@ (80058e0 <vTaskStartScheduler+0xd8>)
 8005890:	2201      	movs	r2, #1
 8005892:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005894:	4b13      	ldr	r3, [pc, #76]	@ (80058e4 <vTaskStartScheduler+0xdc>)
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800589a:	f001 f901 	bl	8006aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800589e:	e00f      	b.n	80058c0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a6:	d10b      	bne.n	80058c0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	60fb      	str	r3, [r7, #12]
}
 80058ba:	bf00      	nop
 80058bc:	bf00      	nop
 80058be:	e7fd      	b.n	80058bc <vTaskStartScheduler+0xb4>
}
 80058c0:	bf00      	nop
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	080073fc 	.word	0x080073fc
 80058cc:	08005f25 	.word	0x08005f25
 80058d0:	2000179c 	.word	0x2000179c
 80058d4:	200012a4 	.word	0x200012a4
 80058d8:	20000010 	.word	0x20000010
 80058dc:	20001798 	.word	0x20001798
 80058e0:	20001784 	.word	0x20001784
 80058e4:	2000177c 	.word	0x2000177c

080058e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80058ec:	4b04      	ldr	r3, [pc, #16]	@ (8005900 <vTaskSuspendAll+0x18>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3301      	adds	r3, #1
 80058f2:	4a03      	ldr	r2, [pc, #12]	@ (8005900 <vTaskSuspendAll+0x18>)
 80058f4:	6013      	str	r3, [r2, #0]
}
 80058f6:	bf00      	nop
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	200017a0 	.word	0x200017a0

08005904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005912:	4b42      	ldr	r3, [pc, #264]	@ (8005a1c <xTaskResumeAll+0x118>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10b      	bne.n	8005932 <xTaskResumeAll+0x2e>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	603b      	str	r3, [r7, #0]
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	e7fd      	b.n	800592e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005932:	f001 f959 	bl	8006be8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005936:	4b39      	ldr	r3, [pc, #228]	@ (8005a1c <xTaskResumeAll+0x118>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3b01      	subs	r3, #1
 800593c:	4a37      	ldr	r2, [pc, #220]	@ (8005a1c <xTaskResumeAll+0x118>)
 800593e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005940:	4b36      	ldr	r3, [pc, #216]	@ (8005a1c <xTaskResumeAll+0x118>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d162      	bne.n	8005a0e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005948:	4b35      	ldr	r3, [pc, #212]	@ (8005a20 <xTaskResumeAll+0x11c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d05e      	beq.n	8005a0e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005950:	e02f      	b.n	80059b2 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005952:	4b34      	ldr	r3, [pc, #208]	@ (8005a24 <xTaskResumeAll+0x120>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3318      	adds	r3, #24
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff f85c 	bl	8004a1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3304      	adds	r3, #4
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff f857 	bl	8004a1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005972:	4b2d      	ldr	r3, [pc, #180]	@ (8005a28 <xTaskResumeAll+0x124>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d903      	bls.n	8005982 <xTaskResumeAll+0x7e>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597e:	4a2a      	ldr	r2, [pc, #168]	@ (8005a28 <xTaskResumeAll+0x124>)
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4a27      	ldr	r2, [pc, #156]	@ (8005a2c <xTaskResumeAll+0x128>)
 8005990:	441a      	add	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3304      	adds	r3, #4
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f7fe ffe2 	bl	8004962 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a2:	4b23      	ldr	r3, [pc, #140]	@ (8005a30 <xTaskResumeAll+0x12c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d302      	bcc.n	80059b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80059ac:	4b21      	ldr	r3, [pc, #132]	@ (8005a34 <xTaskResumeAll+0x130>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005a24 <xTaskResumeAll+0x120>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1cb      	bne.n	8005952 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059c0:	f000 fb6c 	bl	800609c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80059c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a38 <xTaskResumeAll+0x134>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d010      	beq.n	80059f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059d0:	f000 f846 	bl	8005a60 <xTaskIncrementTick>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80059da:	4b16      	ldr	r3, [pc, #88]	@ (8005a34 <xTaskResumeAll+0x130>)
 80059dc:	2201      	movs	r2, #1
 80059de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1f1      	bne.n	80059d0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80059ec:	4b12      	ldr	r3, [pc, #72]	@ (8005a38 <xTaskResumeAll+0x134>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059f2:	4b10      	ldr	r3, [pc, #64]	@ (8005a34 <xTaskResumeAll+0x130>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059fe:	4b0f      	ldr	r3, [pc, #60]	@ (8005a3c <xTaskResumeAll+0x138>)
 8005a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a0e:	f001 f91d 	bl	8006c4c <vPortExitCritical>

	return xAlreadyYielded;
 8005a12:	68bb      	ldr	r3, [r7, #8]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	200017a0 	.word	0x200017a0
 8005a20:	20001778 	.word	0x20001778
 8005a24:	20001738 	.word	0x20001738
 8005a28:	20001780 	.word	0x20001780
 8005a2c:	200012a8 	.word	0x200012a8
 8005a30:	200012a4 	.word	0x200012a4
 8005a34:	2000178c 	.word	0x2000178c
 8005a38:	20001788 	.word	0x20001788
 8005a3c:	e000ed04 	.word	0xe000ed04

08005a40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a46:	4b05      	ldr	r3, [pc, #20]	@ (8005a5c <xTaskGetTickCount+0x1c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a4c:	687b      	ldr	r3, [r7, #4]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	2000177c 	.word	0x2000177c

08005a60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a6a:	4b52      	ldr	r3, [pc, #328]	@ (8005bb4 <xTaskIncrementTick+0x154>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f040 808f 	bne.w	8005b92 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a74:	4b50      	ldr	r3, [pc, #320]	@ (8005bb8 <xTaskIncrementTick+0x158>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a7c:	4a4e      	ldr	r2, [pc, #312]	@ (8005bb8 <xTaskIncrementTick+0x158>)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d121      	bne.n	8005acc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a88:	4b4c      	ldr	r3, [pc, #304]	@ (8005bbc <xTaskIncrementTick+0x15c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00b      	beq.n	8005aaa <xTaskIncrementTick+0x4a>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	603b      	str	r3, [r7, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	e7fd      	b.n	8005aa6 <xTaskIncrementTick+0x46>
 8005aaa:	4b44      	ldr	r3, [pc, #272]	@ (8005bbc <xTaskIncrementTick+0x15c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	4b43      	ldr	r3, [pc, #268]	@ (8005bc0 <xTaskIncrementTick+0x160>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a41      	ldr	r2, [pc, #260]	@ (8005bbc <xTaskIncrementTick+0x15c>)
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	4a41      	ldr	r2, [pc, #260]	@ (8005bc0 <xTaskIncrementTick+0x160>)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	4b41      	ldr	r3, [pc, #260]	@ (8005bc4 <xTaskIncrementTick+0x164>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	4a3f      	ldr	r2, [pc, #252]	@ (8005bc4 <xTaskIncrementTick+0x164>)
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	f000 fae8 	bl	800609c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005acc:	4b3e      	ldr	r3, [pc, #248]	@ (8005bc8 <xTaskIncrementTick+0x168>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d34e      	bcc.n	8005b74 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ad6:	4b39      	ldr	r3, [pc, #228]	@ (8005bbc <xTaskIncrementTick+0x15c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <xTaskIncrementTick+0x84>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <xTaskIncrementTick+0x86>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aea:	4b37      	ldr	r3, [pc, #220]	@ (8005bc8 <xTaskIncrementTick+0x168>)
 8005aec:	f04f 32ff 	mov.w	r2, #4294967295
 8005af0:	601a      	str	r2, [r3, #0]
					break;
 8005af2:	e03f      	b.n	8005b74 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005af4:	4b31      	ldr	r3, [pc, #196]	@ (8005bbc <xTaskIncrementTick+0x15c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d203      	bcs.n	8005b14 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc8 <xTaskIncrementTick+0x168>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6013      	str	r3, [r2, #0]
						break;
 8005b12:	e02f      	b.n	8005b74 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fe ff7f 	bl	8004a1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d004      	beq.n	8005b30 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	3318      	adds	r3, #24
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe ff76 	bl	8004a1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b34:	4b25      	ldr	r3, [pc, #148]	@ (8005bcc <xTaskIncrementTick+0x16c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d903      	bls.n	8005b44 <xTaskIncrementTick+0xe4>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b40:	4a22      	ldr	r2, [pc, #136]	@ (8005bcc <xTaskIncrementTick+0x16c>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4a1f      	ldr	r2, [pc, #124]	@ (8005bd0 <xTaskIncrementTick+0x170>)
 8005b52:	441a      	add	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7fe ff01 	bl	8004962 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b64:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd4 <xTaskIncrementTick+0x174>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d3b3      	bcc.n	8005ad6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b72:	e7b0      	b.n	8005ad6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b74:	4b17      	ldr	r3, [pc, #92]	@ (8005bd4 <xTaskIncrementTick+0x174>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b7a:	4915      	ldr	r1, [pc, #84]	@ (8005bd0 <xTaskIncrementTick+0x170>)
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d907      	bls.n	8005b9c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	e004      	b.n	8005b9c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005b92:	4b11      	ldr	r3, [pc, #68]	@ (8005bd8 <xTaskIncrementTick+0x178>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3301      	adds	r3, #1
 8005b98:	4a0f      	ldr	r2, [pc, #60]	@ (8005bd8 <xTaskIncrementTick+0x178>)
 8005b9a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bdc <xTaskIncrementTick+0x17c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ba8:	697b      	ldr	r3, [r7, #20]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	200017a0 	.word	0x200017a0
 8005bb8:	2000177c 	.word	0x2000177c
 8005bbc:	20001730 	.word	0x20001730
 8005bc0:	20001734 	.word	0x20001734
 8005bc4:	20001790 	.word	0x20001790
 8005bc8:	20001798 	.word	0x20001798
 8005bcc:	20001780 	.word	0x20001780
 8005bd0:	200012a8 	.word	0x200012a8
 8005bd4:	200012a4 	.word	0x200012a4
 8005bd8:	20001788 	.word	0x20001788
 8005bdc:	2000178c 	.word	0x2000178c

08005be0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005be6:	4b2b      	ldr	r3, [pc, #172]	@ (8005c94 <vTaskSwitchContext+0xb4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bee:	4b2a      	ldr	r3, [pc, #168]	@ (8005c98 <vTaskSwitchContext+0xb8>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bf4:	e047      	b.n	8005c86 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005bf6:	4b28      	ldr	r3, [pc, #160]	@ (8005c98 <vTaskSwitchContext+0xb8>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005bfc:	4b27      	ldr	r3, [pc, #156]	@ (8005c9c <vTaskSwitchContext+0xbc>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e011      	b.n	8005c28 <vTaskSwitchContext+0x48>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <vTaskSwitchContext+0x42>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	607b      	str	r3, [r7, #4]
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	e7fd      	b.n	8005c1e <vTaskSwitchContext+0x3e>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	491d      	ldr	r1, [pc, #116]	@ (8005ca0 <vTaskSwitchContext+0xc0>)
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0e3      	beq.n	8005c04 <vTaskSwitchContext+0x24>
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4a16      	ldr	r2, [pc, #88]	@ (8005ca0 <vTaskSwitchContext+0xc0>)
 8005c48:	4413      	add	r3, r2
 8005c4a:	60bb      	str	r3, [r7, #8]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	605a      	str	r2, [r3, #4]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d104      	bne.n	8005c6c <vTaskSwitchContext+0x8c>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	605a      	str	r2, [r3, #4]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	4a0c      	ldr	r2, [pc, #48]	@ (8005ca4 <vTaskSwitchContext+0xc4>)
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	4a09      	ldr	r2, [pc, #36]	@ (8005c9c <vTaskSwitchContext+0xbc>)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ca4 <vTaskSwitchContext+0xc4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3354      	adds	r3, #84	@ 0x54
 8005c82:	4a09      	ldr	r2, [pc, #36]	@ (8005ca8 <vTaskSwitchContext+0xc8>)
 8005c84:	6013      	str	r3, [r2, #0]
}
 8005c86:	bf00      	nop
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	200017a0 	.word	0x200017a0
 8005c98:	2000178c 	.word	0x2000178c
 8005c9c:	20001780 	.word	0x20001780
 8005ca0:	200012a8 	.word	0x200012a8
 8005ca4:	200012a4 	.word	0x200012a4
 8005ca8:	20000010 	.word	0x20000010

08005cac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	60fb      	str	r3, [r7, #12]
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	e7fd      	b.n	8005cd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cd4:	4b07      	ldr	r3, [pc, #28]	@ (8005cf4 <vTaskPlaceOnEventList+0x48>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3318      	adds	r3, #24
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fe fe64 	bl	80049aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	6838      	ldr	r0, [r7, #0]
 8005ce6:	f000 fad9 	bl	800629c <prvAddCurrentTaskToDelayedList>
}
 8005cea:	bf00      	nop
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	200012a4 	.word	0x200012a4

08005cf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10b      	bne.n	8005d22 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	617b      	str	r3, [r7, #20]
}
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	e7fd      	b.n	8005d1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d22:	4b0a      	ldr	r3, [pc, #40]	@ (8005d4c <vTaskPlaceOnEventListRestricted+0x54>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3318      	adds	r3, #24
 8005d28:	4619      	mov	r1, r3
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7fe fe19 	bl	8004962 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005d36:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	68b8      	ldr	r0, [r7, #8]
 8005d40:	f000 faac 	bl	800629c <prvAddCurrentTaskToDelayedList>
	}
 8005d44:	bf00      	nop
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	200012a4 	.word	0x200012a4

08005d50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10b      	bne.n	8005d7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	60fb      	str	r3, [r7, #12]
}
 8005d78:	bf00      	nop
 8005d7a:	bf00      	nop
 8005d7c:	e7fd      	b.n	8005d7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3318      	adds	r3, #24
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fe4a 	bl	8004a1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d88:	4b1d      	ldr	r3, [pc, #116]	@ (8005e00 <xTaskRemoveFromEventList+0xb0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d11d      	bne.n	8005dcc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fe fe41 	bl	8004a1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d9e:	4b19      	ldr	r3, [pc, #100]	@ (8005e04 <xTaskRemoveFromEventList+0xb4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d903      	bls.n	8005dae <xTaskRemoveFromEventList+0x5e>
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005daa:	4a16      	ldr	r2, [pc, #88]	@ (8005e04 <xTaskRemoveFromEventList+0xb4>)
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4a13      	ldr	r2, [pc, #76]	@ (8005e08 <xTaskRemoveFromEventList+0xb8>)
 8005dbc:	441a      	add	r2, r3
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f7fe fdcc 	bl	8004962 <vListInsertEnd>
 8005dca:	e005      	b.n	8005dd8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	3318      	adds	r3, #24
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	480e      	ldr	r0, [pc, #56]	@ (8005e0c <xTaskRemoveFromEventList+0xbc>)
 8005dd4:	f7fe fdc5 	bl	8004962 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8005e10 <xTaskRemoveFromEventList+0xc0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d905      	bls.n	8005df2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005de6:	2301      	movs	r3, #1
 8005de8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005dea:	4b0a      	ldr	r3, [pc, #40]	@ (8005e14 <xTaskRemoveFromEventList+0xc4>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	e001      	b.n	8005df6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005df6:	697b      	ldr	r3, [r7, #20]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	200017a0 	.word	0x200017a0
 8005e04:	20001780 	.word	0x20001780
 8005e08:	200012a8 	.word	0x200012a8
 8005e0c:	20001738 	.word	0x20001738
 8005e10:	200012a4 	.word	0x200012a4
 8005e14:	2000178c 	.word	0x2000178c

08005e18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e20:	4b06      	ldr	r3, [pc, #24]	@ (8005e3c <vTaskInternalSetTimeOutState+0x24>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e28:	4b05      	ldr	r3, [pc, #20]	@ (8005e40 <vTaskInternalSetTimeOutState+0x28>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	605a      	str	r2, [r3, #4]
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	20001790 	.word	0x20001790
 8005e40:	2000177c 	.word	0x2000177c

08005e44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	613b      	str	r3, [r7, #16]
}
 8005e66:	bf00      	nop
 8005e68:	bf00      	nop
 8005e6a:	e7fd      	b.n	8005e68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10b      	bne.n	8005e8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	60fb      	str	r3, [r7, #12]
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	e7fd      	b.n	8005e86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005e8a:	f000 fead 	bl	8006be8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005f04 <xTaskCheckForTimeOut+0xc0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d102      	bne.n	8005eae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	e023      	b.n	8005ef6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b15      	ldr	r3, [pc, #84]	@ (8005f08 <xTaskCheckForTimeOut+0xc4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d007      	beq.n	8005eca <xTaskCheckForTimeOut+0x86>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d302      	bcc.n	8005eca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	61fb      	str	r3, [r7, #28]
 8005ec8:	e015      	b.n	8005ef6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d20b      	bcs.n	8005eec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	1ad2      	subs	r2, r2, r3
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7ff ff99 	bl	8005e18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61fb      	str	r3, [r7, #28]
 8005eea:	e004      	b.n	8005ef6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ef6:	f000 fea9 	bl	8006c4c <vPortExitCritical>

	return xReturn;
 8005efa:	69fb      	ldr	r3, [r7, #28]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3720      	adds	r7, #32
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	2000177c 	.word	0x2000177c
 8005f08:	20001790 	.word	0x20001790

08005f0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f10:	4b03      	ldr	r3, [pc, #12]	@ (8005f20 <vTaskMissedYield+0x14>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]
}
 8005f16:	bf00      	nop
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	2000178c 	.word	0x2000178c

08005f24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f2c:	f000 f852 	bl	8005fd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f30:	4b06      	ldr	r3, [pc, #24]	@ (8005f4c <prvIdleTask+0x28>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d9f9      	bls.n	8005f2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f38:	4b05      	ldr	r3, [pc, #20]	@ (8005f50 <prvIdleTask+0x2c>)
 8005f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f48:	e7f0      	b.n	8005f2c <prvIdleTask+0x8>
 8005f4a:	bf00      	nop
 8005f4c:	200012a8 	.word	0x200012a8
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	607b      	str	r3, [r7, #4]
 8005f5e:	e00c      	b.n	8005f7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4a12      	ldr	r2, [pc, #72]	@ (8005fb4 <prvInitialiseTaskLists+0x60>)
 8005f6c:	4413      	add	r3, r2
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fe fcca 	bl	8004908 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3301      	adds	r3, #1
 8005f78:	607b      	str	r3, [r7, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b37      	cmp	r3, #55	@ 0x37
 8005f7e:	d9ef      	bls.n	8005f60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f80:	480d      	ldr	r0, [pc, #52]	@ (8005fb8 <prvInitialiseTaskLists+0x64>)
 8005f82:	f7fe fcc1 	bl	8004908 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f86:	480d      	ldr	r0, [pc, #52]	@ (8005fbc <prvInitialiseTaskLists+0x68>)
 8005f88:	f7fe fcbe 	bl	8004908 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f8c:	480c      	ldr	r0, [pc, #48]	@ (8005fc0 <prvInitialiseTaskLists+0x6c>)
 8005f8e:	f7fe fcbb 	bl	8004908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f92:	480c      	ldr	r0, [pc, #48]	@ (8005fc4 <prvInitialiseTaskLists+0x70>)
 8005f94:	f7fe fcb8 	bl	8004908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f98:	480b      	ldr	r0, [pc, #44]	@ (8005fc8 <prvInitialiseTaskLists+0x74>)
 8005f9a:	f7fe fcb5 	bl	8004908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fcc <prvInitialiseTaskLists+0x78>)
 8005fa0:	4a05      	ldr	r2, [pc, #20]	@ (8005fb8 <prvInitialiseTaskLists+0x64>)
 8005fa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd0 <prvInitialiseTaskLists+0x7c>)
 8005fa6:	4a05      	ldr	r2, [pc, #20]	@ (8005fbc <prvInitialiseTaskLists+0x68>)
 8005fa8:	601a      	str	r2, [r3, #0]
}
 8005faa:	bf00      	nop
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	200012a8 	.word	0x200012a8
 8005fb8:	20001708 	.word	0x20001708
 8005fbc:	2000171c 	.word	0x2000171c
 8005fc0:	20001738 	.word	0x20001738
 8005fc4:	2000174c 	.word	0x2000174c
 8005fc8:	20001764 	.word	0x20001764
 8005fcc:	20001730 	.word	0x20001730
 8005fd0:	20001734 	.word	0x20001734

08005fd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fda:	e019      	b.n	8006010 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fdc:	f000 fe04 	bl	8006be8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005fe0:	4b10      	ldr	r3, [pc, #64]	@ (8006024 <prvCheckTasksWaitingTermination+0x50>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fe fd15 	bl	8004a1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8006028 <prvCheckTasksWaitingTermination+0x54>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8006028 <prvCheckTasksWaitingTermination+0x54>)
 8005ffa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800602c <prvCheckTasksWaitingTermination+0x58>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3b01      	subs	r3, #1
 8006002:	4a0a      	ldr	r2, [pc, #40]	@ (800602c <prvCheckTasksWaitingTermination+0x58>)
 8006004:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006006:	f000 fe21 	bl	8006c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f810 	bl	8006030 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006010:	4b06      	ldr	r3, [pc, #24]	@ (800602c <prvCheckTasksWaitingTermination+0x58>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e1      	bne.n	8005fdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	2000174c 	.word	0x2000174c
 8006028:	20001778 	.word	0x20001778
 800602c:	20001760 	.word	0x20001760

08006030 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3354      	adds	r3, #84	@ 0x54
 800603c:	4618      	mov	r0, r3
 800603e:	f001 f8dd 	bl	80071fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006048:	2b00      	cmp	r3, #0
 800604a:	d108      	bne.n	800605e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006050:	4618      	mov	r0, r3
 8006052:	f000 ffb3 	bl	8006fbc <vPortFree>
				vPortFree( pxTCB );
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 ffb0 	bl	8006fbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800605c:	e019      	b.n	8006092 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006064:	2b01      	cmp	r3, #1
 8006066:	d103      	bne.n	8006070 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 ffa7 	bl	8006fbc <vPortFree>
	}
 800606e:	e010      	b.n	8006092 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006076:	2b02      	cmp	r3, #2
 8006078:	d00b      	beq.n	8006092 <prvDeleteTCB+0x62>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	60fb      	str	r3, [r7, #12]
}
 800608c:	bf00      	nop
 800608e:	bf00      	nop
 8006090:	e7fd      	b.n	800608e <prvDeleteTCB+0x5e>
	}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060a2:	4b0f      	ldr	r3, [pc, #60]	@ (80060e0 <prvResetNextTaskUnblockTime+0x44>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <prvResetNextTaskUnblockTime+0x14>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <prvResetNextTaskUnblockTime+0x16>
 80060b0:	2300      	movs	r3, #0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060b6:	4b0b      	ldr	r3, [pc, #44]	@ (80060e4 <prvResetNextTaskUnblockTime+0x48>)
 80060b8:	f04f 32ff 	mov.w	r2, #4294967295
 80060bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060be:	e008      	b.n	80060d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060c0:	4b07      	ldr	r3, [pc, #28]	@ (80060e0 <prvResetNextTaskUnblockTime+0x44>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	4a05      	ldr	r2, [pc, #20]	@ (80060e4 <prvResetNextTaskUnblockTime+0x48>)
 80060d0:	6013      	str	r3, [r2, #0]
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20001730 	.word	0x20001730
 80060e4:	20001798 	.word	0x20001798

080060e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060ee:	4b0b      	ldr	r3, [pc, #44]	@ (800611c <xTaskGetSchedulerState+0x34>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d102      	bne.n	80060fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060f6:	2301      	movs	r3, #1
 80060f8:	607b      	str	r3, [r7, #4]
 80060fa:	e008      	b.n	800610e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060fc:	4b08      	ldr	r3, [pc, #32]	@ (8006120 <xTaskGetSchedulerState+0x38>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d102      	bne.n	800610a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006104:	2302      	movs	r3, #2
 8006106:	607b      	str	r3, [r7, #4]
 8006108:	e001      	b.n	800610e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800610a:	2300      	movs	r3, #0
 800610c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800610e:	687b      	ldr	r3, [r7, #4]
	}
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	20001784 	.word	0x20001784
 8006120:	200017a0 	.word	0x200017a0

08006124 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d058      	beq.n	80061ec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800613a:	4b2f      	ldr	r3, [pc, #188]	@ (80061f8 <xTaskPriorityDisinherit+0xd4>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	429a      	cmp	r2, r3
 8006142:	d00b      	beq.n	800615c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	60fb      	str	r3, [r7, #12]
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	e7fd      	b.n	8006158 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10b      	bne.n	800617c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	60bb      	str	r3, [r7, #8]
}
 8006176:	bf00      	nop
 8006178:	bf00      	nop
 800617a:	e7fd      	b.n	8006178 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006180:	1e5a      	subs	r2, r3, #1
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800618e:	429a      	cmp	r2, r3
 8006190:	d02c      	beq.n	80061ec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006196:	2b00      	cmp	r3, #0
 8006198:	d128      	bne.n	80061ec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	3304      	adds	r3, #4
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fc3c 	bl	8004a1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061bc:	4b0f      	ldr	r3, [pc, #60]	@ (80061fc <xTaskPriorityDisinherit+0xd8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d903      	bls.n	80061cc <xTaskPriorityDisinherit+0xa8>
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c8:	4a0c      	ldr	r2, [pc, #48]	@ (80061fc <xTaskPriorityDisinherit+0xd8>)
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4a09      	ldr	r2, [pc, #36]	@ (8006200 <xTaskPriorityDisinherit+0xdc>)
 80061da:	441a      	add	r2, r3
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	3304      	adds	r3, #4
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f7fe fbbd 	bl	8004962 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061e8:	2301      	movs	r3, #1
 80061ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061ec:	697b      	ldr	r3, [r7, #20]
	}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	200012a4 	.word	0x200012a4
 80061fc:	20001780 	.word	0x20001780
 8006200:	200012a8 	.word	0x200012a8

08006204 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800620e:	f000 fceb 	bl	8006be8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006212:	4b20      	ldr	r3, [pc, #128]	@ (8006294 <ulTaskNotifyTake+0x90>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d113      	bne.n	8006246 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800621e:	4b1d      	ldr	r3, [pc, #116]	@ (8006294 <ulTaskNotifyTake+0x90>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800622e:	2101      	movs	r1, #1
 8006230:	6838      	ldr	r0, [r7, #0]
 8006232:	f000 f833 	bl	800629c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006236:	4b18      	ldr	r3, [pc, #96]	@ (8006298 <ulTaskNotifyTake+0x94>)
 8006238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006246:	f000 fd01 	bl	8006c4c <vPortExitCritical>

		taskENTER_CRITICAL();
 800624a:	f000 fccd 	bl	8006be8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800624e:	4b11      	ldr	r3, [pc, #68]	@ (8006294 <ulTaskNotifyTake+0x90>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006256:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00e      	beq.n	800627c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006264:	4b0b      	ldr	r3, [pc, #44]	@ (8006294 <ulTaskNotifyTake+0x90>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2200      	movs	r2, #0
 800626a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800626e:	e005      	b.n	800627c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006270:	4b08      	ldr	r3, [pc, #32]	@ (8006294 <ulTaskNotifyTake+0x90>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	3a01      	subs	r2, #1
 8006278:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800627c:	4b05      	ldr	r3, [pc, #20]	@ (8006294 <ulTaskNotifyTake+0x90>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8006286:	f000 fce1 	bl	8006c4c <vPortExitCritical>

		return ulReturn;
 800628a:	68fb      	ldr	r3, [r7, #12]
	}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	200012a4 	.word	0x200012a4
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062a6:	4b21      	ldr	r3, [pc, #132]	@ (800632c <prvAddCurrentTaskToDelayedList+0x90>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062ac:	4b20      	ldr	r3, [pc, #128]	@ (8006330 <prvAddCurrentTaskToDelayedList+0x94>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3304      	adds	r3, #4
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fe fbb2 	bl	8004a1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d10a      	bne.n	80062d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006330 <prvAddCurrentTaskToDelayedList+0x94>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4619      	mov	r1, r3
 80062ce:	4819      	ldr	r0, [pc, #100]	@ (8006334 <prvAddCurrentTaskToDelayedList+0x98>)
 80062d0:	f7fe fb47 	bl	8004962 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062d4:	e026      	b.n	8006324 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4413      	add	r3, r2
 80062dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062de:	4b14      	ldr	r3, [pc, #80]	@ (8006330 <prvAddCurrentTaskToDelayedList+0x94>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d209      	bcs.n	8006302 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ee:	4b12      	ldr	r3, [pc, #72]	@ (8006338 <prvAddCurrentTaskToDelayedList+0x9c>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006330 <prvAddCurrentTaskToDelayedList+0x94>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3304      	adds	r3, #4
 80062f8:	4619      	mov	r1, r3
 80062fa:	4610      	mov	r0, r2
 80062fc:	f7fe fb55 	bl	80049aa <vListInsert>
}
 8006300:	e010      	b.n	8006324 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006302:	4b0e      	ldr	r3, [pc, #56]	@ (800633c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	4b0a      	ldr	r3, [pc, #40]	@ (8006330 <prvAddCurrentTaskToDelayedList+0x94>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3304      	adds	r3, #4
 800630c:	4619      	mov	r1, r3
 800630e:	4610      	mov	r0, r2
 8006310:	f7fe fb4b 	bl	80049aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006314:	4b0a      	ldr	r3, [pc, #40]	@ (8006340 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	429a      	cmp	r2, r3
 800631c:	d202      	bcs.n	8006324 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800631e:	4a08      	ldr	r2, [pc, #32]	@ (8006340 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6013      	str	r3, [r2, #0]
}
 8006324:	bf00      	nop
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	2000177c 	.word	0x2000177c
 8006330:	200012a4 	.word	0x200012a4
 8006334:	20001764 	.word	0x20001764
 8006338:	20001734 	.word	0x20001734
 800633c:	20001730 	.word	0x20001730
 8006340:	20001798 	.word	0x20001798

08006344 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08a      	sub	sp, #40	@ 0x28
 8006348:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800634e:	f000 fad9 	bl	8006904 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006352:	4b1d      	ldr	r3, [pc, #116]	@ (80063c8 <xTimerCreateTimerTask+0x84>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d021      	beq.n	800639e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800635e:	2300      	movs	r3, #0
 8006360:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006362:	1d3a      	adds	r2, r7, #4
 8006364:	f107 0108 	add.w	r1, r7, #8
 8006368:	f107 030c 	add.w	r3, r7, #12
 800636c:	4618      	mov	r0, r3
 800636e:	f7fe fab1 	bl	80048d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	9202      	str	r2, [sp, #8]
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	2302      	movs	r3, #2
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	2300      	movs	r3, #0
 8006382:	460a      	mov	r2, r1
 8006384:	4911      	ldr	r1, [pc, #68]	@ (80063cc <xTimerCreateTimerTask+0x88>)
 8006386:	4812      	ldr	r0, [pc, #72]	@ (80063d0 <xTimerCreateTimerTask+0x8c>)
 8006388:	f7ff f88a 	bl	80054a0 <xTaskCreateStatic>
 800638c:	4603      	mov	r3, r0
 800638e:	4a11      	ldr	r2, [pc, #68]	@ (80063d4 <xTimerCreateTimerTask+0x90>)
 8006390:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006392:	4b10      	ldr	r3, [pc, #64]	@ (80063d4 <xTimerCreateTimerTask+0x90>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800639a:	2301      	movs	r3, #1
 800639c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10b      	bne.n	80063bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	613b      	str	r3, [r7, #16]
}
 80063b6:	bf00      	nop
 80063b8:	bf00      	nop
 80063ba:	e7fd      	b.n	80063b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80063bc:	697b      	ldr	r3, [r7, #20]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	200017d4 	.word	0x200017d4
 80063cc:	08007404 	.word	0x08007404
 80063d0:	080064f9 	.word	0x080064f9
 80063d4:	200017d8 	.word	0x200017d8

080063d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	@ 0x28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10b      	bne.n	8006408 <xTimerGenericCommand+0x30>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	623b      	str	r3, [r7, #32]
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	e7fd      	b.n	8006404 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006408:	4b19      	ldr	r3, [pc, #100]	@ (8006470 <xTimerGenericCommand+0x98>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d02a      	beq.n	8006466 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b05      	cmp	r3, #5
 8006420:	dc18      	bgt.n	8006454 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006422:	f7ff fe61 	bl	80060e8 <xTaskGetSchedulerState>
 8006426:	4603      	mov	r3, r0
 8006428:	2b02      	cmp	r3, #2
 800642a:	d109      	bne.n	8006440 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800642c:	4b10      	ldr	r3, [pc, #64]	@ (8006470 <xTimerGenericCommand+0x98>)
 800642e:	6818      	ldr	r0, [r3, #0]
 8006430:	f107 0110 	add.w	r1, r7, #16
 8006434:	2300      	movs	r3, #0
 8006436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006438:	f7fe fc24 	bl	8004c84 <xQueueGenericSend>
 800643c:	6278      	str	r0, [r7, #36]	@ 0x24
 800643e:	e012      	b.n	8006466 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006440:	4b0b      	ldr	r3, [pc, #44]	@ (8006470 <xTimerGenericCommand+0x98>)
 8006442:	6818      	ldr	r0, [r3, #0]
 8006444:	f107 0110 	add.w	r1, r7, #16
 8006448:	2300      	movs	r3, #0
 800644a:	2200      	movs	r2, #0
 800644c:	f7fe fc1a 	bl	8004c84 <xQueueGenericSend>
 8006450:	6278      	str	r0, [r7, #36]	@ 0x24
 8006452:	e008      	b.n	8006466 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006454:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <xTimerGenericCommand+0x98>)
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	f107 0110 	add.w	r1, r7, #16
 800645c:	2300      	movs	r3, #0
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	f7fe fd12 	bl	8004e88 <xQueueGenericSendFromISR>
 8006464:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006468:	4618      	mov	r0, r3
 800646a:	3728      	adds	r7, #40	@ 0x28
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	200017d4 	.word	0x200017d4

08006474 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af02      	add	r7, sp, #8
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800647e:	4b1d      	ldr	r3, [pc, #116]	@ (80064f4 <prvProcessExpiredTimer+0x80>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	3304      	adds	r3, #4
 800648c:	4618      	mov	r0, r3
 800648e:	f7fe fac5 	bl	8004a1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d123      	bne.n	80064e2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	18d1      	adds	r1, r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	6978      	ldr	r0, [r7, #20]
 80064a8:	f000 f8cc 	bl	8006644 <prvInsertTimerInActiveList>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d017      	beq.n	80064e2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064b2:	2300      	movs	r3, #0
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	2300      	movs	r3, #0
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	2100      	movs	r1, #0
 80064bc:	6978      	ldr	r0, [r7, #20]
 80064be:	f7ff ff8b 	bl	80063d8 <xTimerGenericCommand>
 80064c2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10b      	bne.n	80064e2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	60fb      	str	r3, [r7, #12]
}
 80064dc:	bf00      	nop
 80064de:	bf00      	nop
 80064e0:	e7fd      	b.n	80064de <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e6:	6978      	ldr	r0, [r7, #20]
 80064e8:	4798      	blx	r3
}
 80064ea:	bf00      	nop
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	200017cc 	.word	0x200017cc

080064f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006500:	f107 0308 	add.w	r3, r7, #8
 8006504:	4618      	mov	r0, r3
 8006506:	f000 f859 	bl	80065bc <prvGetNextExpireTime>
 800650a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4619      	mov	r1, r3
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f805 	bl	8006520 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006516:	f000 f8d7 	bl	80066c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800651a:	bf00      	nop
 800651c:	e7f0      	b.n	8006500 <prvTimerTask+0x8>
	...

08006520 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800652a:	f7ff f9dd 	bl	80058e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800652e:	f107 0308 	add.w	r3, r7, #8
 8006532:	4618      	mov	r0, r3
 8006534:	f000 f866 	bl	8006604 <prvSampleTimeNow>
 8006538:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d130      	bne.n	80065a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10a      	bne.n	800655c <prvProcessTimerOrBlockTask+0x3c>
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	429a      	cmp	r2, r3
 800654c:	d806      	bhi.n	800655c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800654e:	f7ff f9d9 	bl	8005904 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff ff8d 	bl	8006474 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800655a:	e024      	b.n	80065a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d008      	beq.n	8006574 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006562:	4b13      	ldr	r3, [pc, #76]	@ (80065b0 <prvProcessTimerOrBlockTask+0x90>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	bf0c      	ite	eq
 800656c:	2301      	moveq	r3, #1
 800656e:	2300      	movne	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006574:	4b0f      	ldr	r3, [pc, #60]	@ (80065b4 <prvProcessTimerOrBlockTask+0x94>)
 8006576:	6818      	ldr	r0, [r3, #0]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	4619      	mov	r1, r3
 8006582:	f7fe ff59 	bl	8005438 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006586:	f7ff f9bd 	bl	8005904 <xTaskResumeAll>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006590:	4b09      	ldr	r3, [pc, #36]	@ (80065b8 <prvProcessTimerOrBlockTask+0x98>)
 8006592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	f3bf 8f6f 	isb	sy
}
 80065a0:	e001      	b.n	80065a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80065a2:	f7ff f9af 	bl	8005904 <xTaskResumeAll>
}
 80065a6:	bf00      	nop
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	200017d0 	.word	0x200017d0
 80065b4:	200017d4 	.word	0x200017d4
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006600 <prvGetNextExpireTime+0x44>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	bf0c      	ite	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	2300      	movne	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d105      	bne.n	80065ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065e2:	4b07      	ldr	r3, [pc, #28]	@ (8006600 <prvGetNextExpireTime+0x44>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	e001      	b.n	80065f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065f2:	68fb      	ldr	r3, [r7, #12]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	200017cc 	.word	0x200017cc

08006604 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800660c:	f7ff fa18 	bl	8005a40 <xTaskGetTickCount>
 8006610:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006612:	4b0b      	ldr	r3, [pc, #44]	@ (8006640 <prvSampleTimeNow+0x3c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	429a      	cmp	r2, r3
 800661a:	d205      	bcs.n	8006628 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800661c:	f000 f910 	bl	8006840 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	e002      	b.n	800662e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800662e:	4a04      	ldr	r2, [pc, #16]	@ (8006640 <prvSampleTimeNow+0x3c>)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006634:	68fb      	ldr	r3, [r7, #12]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	200017dc 	.word	0x200017dc

08006644 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006652:	2300      	movs	r3, #0
 8006654:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d812      	bhi.n	8006690 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	1ad2      	subs	r2, r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	429a      	cmp	r2, r3
 8006676:	d302      	bcc.n	800667e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006678:	2301      	movs	r3, #1
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	e01b      	b.n	80066b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800667e:	4b10      	ldr	r3, [pc, #64]	@ (80066c0 <prvInsertTimerInActiveList+0x7c>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3304      	adds	r3, #4
 8006686:	4619      	mov	r1, r3
 8006688:	4610      	mov	r0, r2
 800668a:	f7fe f98e 	bl	80049aa <vListInsert>
 800668e:	e012      	b.n	80066b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d206      	bcs.n	80066a6 <prvInsertTimerInActiveList+0x62>
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d302      	bcc.n	80066a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80066a0:	2301      	movs	r3, #1
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	e007      	b.n	80066b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066a6:	4b07      	ldr	r3, [pc, #28]	@ (80066c4 <prvInsertTimerInActiveList+0x80>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3304      	adds	r3, #4
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f7fe f97a 	bl	80049aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80066b6:	697b      	ldr	r3, [r7, #20]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	200017d0 	.word	0x200017d0
 80066c4:	200017cc 	.word	0x200017cc

080066c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08e      	sub	sp, #56	@ 0x38
 80066cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066ce:	e0a5      	b.n	800681c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	da19      	bge.n	800670a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80066d6:	1d3b      	adds	r3, r7, #4
 80066d8:	3304      	adds	r3, #4
 80066da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80066dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	61fb      	str	r3, [r7, #28]
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	e7fd      	b.n	80066f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80066fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006700:	6850      	ldr	r0, [r2, #4]
 8006702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006704:	6892      	ldr	r2, [r2, #8]
 8006706:	4611      	mov	r1, r2
 8006708:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f2c0 8085 	blt.w	800681c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d004      	beq.n	8006728 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800671e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006720:	3304      	adds	r3, #4
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe f97a 	bl	8004a1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006728:	463b      	mov	r3, r7
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff ff6a 	bl	8006604 <prvSampleTimeNow>
 8006730:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b09      	cmp	r3, #9
 8006736:	d86c      	bhi.n	8006812 <prvProcessReceivedCommands+0x14a>
 8006738:	a201      	add	r2, pc, #4	@ (adr r2, 8006740 <prvProcessReceivedCommands+0x78>)
 800673a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673e:	bf00      	nop
 8006740:	08006769 	.word	0x08006769
 8006744:	08006769 	.word	0x08006769
 8006748:	08006769 	.word	0x08006769
 800674c:	08006813 	.word	0x08006813
 8006750:	080067c7 	.word	0x080067c7
 8006754:	08006801 	.word	0x08006801
 8006758:	08006769 	.word	0x08006769
 800675c:	08006769 	.word	0x08006769
 8006760:	08006813 	.word	0x08006813
 8006764:	080067c7 	.word	0x080067c7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	18d1      	adds	r1, r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006776:	f7ff ff65 	bl	8006644 <prvInsertTimerInActiveList>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d04a      	beq.n	8006816 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006784:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006786:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d142      	bne.n	8006816 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	441a      	add	r2, r3
 8006798:	2300      	movs	r3, #0
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	2300      	movs	r3, #0
 800679e:	2100      	movs	r1, #0
 80067a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067a2:	f7ff fe19 	bl	80063d8 <xTimerGenericCommand>
 80067a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d133      	bne.n	8006816 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	61bb      	str	r3, [r7, #24]
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	e7fd      	b.n	80067c2 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10b      	bne.n	80067ec <prvProcessReceivedCommands+0x124>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	617b      	str	r3, [r7, #20]
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	e7fd      	b.n	80067e8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	699a      	ldr	r2, [r3, #24]
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	18d1      	adds	r1, r2, r3
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067fa:	f7ff ff23 	bl	8006644 <prvInsertTimerInActiveList>
					break;
 80067fe:	e00d      	b.n	800681c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006802:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d107      	bne.n	800681a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800680a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800680c:	f000 fbd6 	bl	8006fbc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006810:	e003      	b.n	800681a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8006812:	bf00      	nop
 8006814:	e002      	b.n	800681c <prvProcessReceivedCommands+0x154>
					break;
 8006816:	bf00      	nop
 8006818:	e000      	b.n	800681c <prvProcessReceivedCommands+0x154>
					break;
 800681a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800681c:	4b07      	ldr	r3, [pc, #28]	@ (800683c <prvProcessReceivedCommands+0x174>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	1d39      	adds	r1, r7, #4
 8006822:	2200      	movs	r2, #0
 8006824:	4618      	mov	r0, r3
 8006826:	f7fe fbcb 	bl	8004fc0 <xQueueReceive>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	f47f af4f 	bne.w	80066d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	3730      	adds	r7, #48	@ 0x30
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	200017d4 	.word	0x200017d4

08006840 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006846:	e046      	b.n	80068d6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006848:	4b2c      	ldr	r3, [pc, #176]	@ (80068fc <prvSwitchTimerLists+0xbc>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006852:	4b2a      	ldr	r3, [pc, #168]	@ (80068fc <prvSwitchTimerLists+0xbc>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3304      	adds	r3, #4
 8006860:	4618      	mov	r0, r3
 8006862:	f7fe f8db 	bl	8004a1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d12f      	bne.n	80068d6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4413      	add	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	429a      	cmp	r2, r3
 8006886:	d90e      	bls.n	80068a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006894:	4b19      	ldr	r3, [pc, #100]	@ (80068fc <prvSwitchTimerLists+0xbc>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3304      	adds	r3, #4
 800689c:	4619      	mov	r1, r3
 800689e:	4610      	mov	r0, r2
 80068a0:	f7fe f883 	bl	80049aa <vListInsert>
 80068a4:	e017      	b.n	80068d6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068a6:	2300      	movs	r3, #0
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	2300      	movs	r3, #0
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	2100      	movs	r1, #0
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f7ff fd91 	bl	80063d8 <xTimerGenericCommand>
 80068b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10b      	bne.n	80068d6 <prvSwitchTimerLists+0x96>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	603b      	str	r3, [r7, #0]
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	e7fd      	b.n	80068d2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068d6:	4b09      	ldr	r3, [pc, #36]	@ (80068fc <prvSwitchTimerLists+0xbc>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1b3      	bne.n	8006848 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068e0:	4b06      	ldr	r3, [pc, #24]	@ (80068fc <prvSwitchTimerLists+0xbc>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068e6:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <prvSwitchTimerLists+0xc0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a04      	ldr	r2, [pc, #16]	@ (80068fc <prvSwitchTimerLists+0xbc>)
 80068ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80068ee:	4a04      	ldr	r2, [pc, #16]	@ (8006900 <prvSwitchTimerLists+0xc0>)
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	6013      	str	r3, [r2, #0]
}
 80068f4:	bf00      	nop
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	200017cc 	.word	0x200017cc
 8006900:	200017d0 	.word	0x200017d0

08006904 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800690a:	f000 f96d 	bl	8006be8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800690e:	4b15      	ldr	r3, [pc, #84]	@ (8006964 <prvCheckForValidListAndQueue+0x60>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d120      	bne.n	8006958 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006916:	4814      	ldr	r0, [pc, #80]	@ (8006968 <prvCheckForValidListAndQueue+0x64>)
 8006918:	f7fd fff6 	bl	8004908 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800691c:	4813      	ldr	r0, [pc, #76]	@ (800696c <prvCheckForValidListAndQueue+0x68>)
 800691e:	f7fd fff3 	bl	8004908 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006922:	4b13      	ldr	r3, [pc, #76]	@ (8006970 <prvCheckForValidListAndQueue+0x6c>)
 8006924:	4a10      	ldr	r2, [pc, #64]	@ (8006968 <prvCheckForValidListAndQueue+0x64>)
 8006926:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006928:	4b12      	ldr	r3, [pc, #72]	@ (8006974 <prvCheckForValidListAndQueue+0x70>)
 800692a:	4a10      	ldr	r2, [pc, #64]	@ (800696c <prvCheckForValidListAndQueue+0x68>)
 800692c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800692e:	2300      	movs	r3, #0
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	4b11      	ldr	r3, [pc, #68]	@ (8006978 <prvCheckForValidListAndQueue+0x74>)
 8006934:	4a11      	ldr	r2, [pc, #68]	@ (800697c <prvCheckForValidListAndQueue+0x78>)
 8006936:	2110      	movs	r1, #16
 8006938:	200a      	movs	r0, #10
 800693a:	f7fe f903 	bl	8004b44 <xQueueGenericCreateStatic>
 800693e:	4603      	mov	r3, r0
 8006940:	4a08      	ldr	r2, [pc, #32]	@ (8006964 <prvCheckForValidListAndQueue+0x60>)
 8006942:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006944:	4b07      	ldr	r3, [pc, #28]	@ (8006964 <prvCheckForValidListAndQueue+0x60>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800694c:	4b05      	ldr	r3, [pc, #20]	@ (8006964 <prvCheckForValidListAndQueue+0x60>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	490b      	ldr	r1, [pc, #44]	@ (8006980 <prvCheckForValidListAndQueue+0x7c>)
 8006952:	4618      	mov	r0, r3
 8006954:	f7fe fd46 	bl	80053e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006958:	f000 f978 	bl	8006c4c <vPortExitCritical>
}
 800695c:	bf00      	nop
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	200017d4 	.word	0x200017d4
 8006968:	200017a4 	.word	0x200017a4
 800696c:	200017b8 	.word	0x200017b8
 8006970:	200017cc 	.word	0x200017cc
 8006974:	200017d0 	.word	0x200017d0
 8006978:	20001880 	.word	0x20001880
 800697c:	200017e0 	.word	0x200017e0
 8006980:	0800740c 	.word	0x0800740c

08006984 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3b04      	subs	r3, #4
 8006994:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800699c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3b04      	subs	r3, #4
 80069a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f023 0201 	bic.w	r2, r3, #1
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3b04      	subs	r3, #4
 80069b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069b4:	4a0c      	ldr	r2, [pc, #48]	@ (80069e8 <pxPortInitialiseStack+0x64>)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3b14      	subs	r3, #20
 80069be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3b04      	subs	r3, #4
 80069ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f06f 0202 	mvn.w	r2, #2
 80069d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3b20      	subs	r3, #32
 80069d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069da:	68fb      	ldr	r3, [r7, #12]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	080069ed 	.word	0x080069ed

080069ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069f6:	4b13      	ldr	r3, [pc, #76]	@ (8006a44 <prvTaskExitError+0x58>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fe:	d00b      	beq.n	8006a18 <prvTaskExitError+0x2c>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	60fb      	str	r3, [r7, #12]
}
 8006a12:	bf00      	nop
 8006a14:	bf00      	nop
 8006a16:	e7fd      	b.n	8006a14 <prvTaskExitError+0x28>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	60bb      	str	r3, [r7, #8]
}
 8006a2a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a2c:	bf00      	nop
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0fc      	beq.n	8006a2e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	2000000c 	.word	0x2000000c
	...

08006a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a50:	4b07      	ldr	r3, [pc, #28]	@ (8006a70 <pxCurrentTCBConst2>)
 8006a52:	6819      	ldr	r1, [r3, #0]
 8006a54:	6808      	ldr	r0, [r1, #0]
 8006a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5a:	f380 8809 	msr	PSP, r0
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f04f 0000 	mov.w	r0, #0
 8006a66:	f380 8811 	msr	BASEPRI, r0
 8006a6a:	4770      	bx	lr
 8006a6c:	f3af 8000 	nop.w

08006a70 <pxCurrentTCBConst2>:
 8006a70:	200012a4 	.word	0x200012a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop

08006a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a78:	4808      	ldr	r0, [pc, #32]	@ (8006a9c <prvPortStartFirstTask+0x24>)
 8006a7a:	6800      	ldr	r0, [r0, #0]
 8006a7c:	6800      	ldr	r0, [r0, #0]
 8006a7e:	f380 8808 	msr	MSP, r0
 8006a82:	f04f 0000 	mov.w	r0, #0
 8006a86:	f380 8814 	msr	CONTROL, r0
 8006a8a:	b662      	cpsie	i
 8006a8c:	b661      	cpsie	f
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	df00      	svc	0
 8006a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a9a:	bf00      	nop
 8006a9c:	e000ed08 	.word	0xe000ed08

08006aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006aa6:	4b47      	ldr	r3, [pc, #284]	@ (8006bc4 <xPortStartScheduler+0x124>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a47      	ldr	r2, [pc, #284]	@ (8006bc8 <xPortStartScheduler+0x128>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d10b      	bne.n	8006ac8 <xPortStartScheduler+0x28>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	613b      	str	r3, [r7, #16]
}
 8006ac2:	bf00      	nop
 8006ac4:	bf00      	nop
 8006ac6:	e7fd      	b.n	8006ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8006bc4 <xPortStartScheduler+0x124>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a3f      	ldr	r2, [pc, #252]	@ (8006bcc <xPortStartScheduler+0x12c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d10b      	bne.n	8006aea <xPortStartScheduler+0x4a>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	60fb      	str	r3, [r7, #12]
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	e7fd      	b.n	8006ae6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006aea:	4b39      	ldr	r3, [pc, #228]	@ (8006bd0 <xPortStartScheduler+0x130>)
 8006aec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	22ff      	movs	r2, #255	@ 0xff
 8006afa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	4b31      	ldr	r3, [pc, #196]	@ (8006bd4 <xPortStartScheduler+0x134>)
 8006b10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b12:	4b31      	ldr	r3, [pc, #196]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b14:	2207      	movs	r2, #7
 8006b16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b18:	e009      	b.n	8006b2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	4a2d      	ldr	r2, [pc, #180]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b2e:	78fb      	ldrb	r3, [r7, #3]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b36:	2b80      	cmp	r3, #128	@ 0x80
 8006b38:	d0ef      	beq.n	8006b1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b3a:	4b27      	ldr	r3, [pc, #156]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f1c3 0307 	rsb	r3, r3, #7
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d00b      	beq.n	8006b5e <xPortStartScheduler+0xbe>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	60bb      	str	r3, [r7, #8]
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	e7fd      	b.n	8006b5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b68:	4b1b      	ldr	r3, [pc, #108]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b70:	4a19      	ldr	r2, [pc, #100]	@ (8006bd8 <xPortStartScheduler+0x138>)
 8006b72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b7c:	4b17      	ldr	r3, [pc, #92]	@ (8006bdc <xPortStartScheduler+0x13c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a16      	ldr	r2, [pc, #88]	@ (8006bdc <xPortStartScheduler+0x13c>)
 8006b82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b88:	4b14      	ldr	r3, [pc, #80]	@ (8006bdc <xPortStartScheduler+0x13c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a13      	ldr	r2, [pc, #76]	@ (8006bdc <xPortStartScheduler+0x13c>)
 8006b8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b94:	f000 f8da 	bl	8006d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b98:	4b11      	ldr	r3, [pc, #68]	@ (8006be0 <xPortStartScheduler+0x140>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b9e:	f000 f8f9 	bl	8006d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ba2:	4b10      	ldr	r3, [pc, #64]	@ (8006be4 <xPortStartScheduler+0x144>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8006be4 <xPortStartScheduler+0x144>)
 8006ba8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006bac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bae:	f7ff ff63 	bl	8006a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bb2:	f7ff f815 	bl	8005be0 <vTaskSwitchContext>
	prvTaskExitError();
 8006bb6:	f7ff ff19 	bl	80069ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	e000ed00 	.word	0xe000ed00
 8006bc8:	410fc271 	.word	0x410fc271
 8006bcc:	410fc270 	.word	0x410fc270
 8006bd0:	e000e400 	.word	0xe000e400
 8006bd4:	200018d0 	.word	0x200018d0
 8006bd8:	200018d4 	.word	0x200018d4
 8006bdc:	e000ed20 	.word	0xe000ed20
 8006be0:	2000000c 	.word	0x2000000c
 8006be4:	e000ef34 	.word	0xe000ef34

08006be8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	607b      	str	r3, [r7, #4]
}
 8006c00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c02:	4b10      	ldr	r3, [pc, #64]	@ (8006c44 <vPortEnterCritical+0x5c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3301      	adds	r3, #1
 8006c08:	4a0e      	ldr	r2, [pc, #56]	@ (8006c44 <vPortEnterCritical+0x5c>)
 8006c0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c44 <vPortEnterCritical+0x5c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d110      	bne.n	8006c36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c14:	4b0c      	ldr	r3, [pc, #48]	@ (8006c48 <vPortEnterCritical+0x60>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <vPortEnterCritical+0x4e>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	603b      	str	r3, [r7, #0]
}
 8006c30:	bf00      	nop
 8006c32:	bf00      	nop
 8006c34:	e7fd      	b.n	8006c32 <vPortEnterCritical+0x4a>
	}
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	2000000c 	.word	0x2000000c
 8006c48:	e000ed04 	.word	0xe000ed04

08006c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c52:	4b12      	ldr	r3, [pc, #72]	@ (8006c9c <vPortExitCritical+0x50>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10b      	bne.n	8006c72 <vPortExitCritical+0x26>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	607b      	str	r3, [r7, #4]
}
 8006c6c:	bf00      	nop
 8006c6e:	bf00      	nop
 8006c70:	e7fd      	b.n	8006c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c72:	4b0a      	ldr	r3, [pc, #40]	@ (8006c9c <vPortExitCritical+0x50>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	4a08      	ldr	r2, [pc, #32]	@ (8006c9c <vPortExitCritical+0x50>)
 8006c7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c7c:	4b07      	ldr	r3, [pc, #28]	@ (8006c9c <vPortExitCritical+0x50>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d105      	bne.n	8006c90 <vPortExitCritical+0x44>
 8006c84:	2300      	movs	r3, #0
 8006c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f383 8811 	msr	BASEPRI, r3
}
 8006c8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	2000000c 	.word	0x2000000c

08006ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ca0:	f3ef 8009 	mrs	r0, PSP
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	4b15      	ldr	r3, [pc, #84]	@ (8006d00 <pxCurrentTCBConst>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	f01e 0f10 	tst.w	lr, #16
 8006cb0:	bf08      	it	eq
 8006cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cba:	6010      	str	r0, [r2, #0]
 8006cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006cc4:	f380 8811 	msr	BASEPRI, r0
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f7fe ff86 	bl	8005be0 <vTaskSwitchContext>
 8006cd4:	f04f 0000 	mov.w	r0, #0
 8006cd8:	f380 8811 	msr	BASEPRI, r0
 8006cdc:	bc09      	pop	{r0, r3}
 8006cde:	6819      	ldr	r1, [r3, #0]
 8006ce0:	6808      	ldr	r0, [r1, #0]
 8006ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce6:	f01e 0f10 	tst.w	lr, #16
 8006cea:	bf08      	it	eq
 8006cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006cf0:	f380 8809 	msr	PSP, r0
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	f3af 8000 	nop.w

08006d00 <pxCurrentTCBConst>:
 8006d00:	200012a4 	.word	0x200012a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop

08006d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	607b      	str	r3, [r7, #4]
}
 8006d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d22:	f7fe fe9d 	bl	8005a60 <xTaskIncrementTick>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d2c:	4b06      	ldr	r3, [pc, #24]	@ (8006d48 <SysTick_Handler+0x40>)
 8006d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	2300      	movs	r3, #0
 8006d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	f383 8811 	msr	BASEPRI, r3
}
 8006d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	e000ed04 	.word	0xe000ed04

08006d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d50:	4b0b      	ldr	r3, [pc, #44]	@ (8006d80 <vPortSetupTimerInterrupt+0x34>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d56:	4b0b      	ldr	r3, [pc, #44]	@ (8006d84 <vPortSetupTimerInterrupt+0x38>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d88 <vPortSetupTimerInterrupt+0x3c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a0a      	ldr	r2, [pc, #40]	@ (8006d8c <vPortSetupTimerInterrupt+0x40>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	099b      	lsrs	r3, r3, #6
 8006d68:	4a09      	ldr	r2, [pc, #36]	@ (8006d90 <vPortSetupTimerInterrupt+0x44>)
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d6e:	4b04      	ldr	r3, [pc, #16]	@ (8006d80 <vPortSetupTimerInterrupt+0x34>)
 8006d70:	2207      	movs	r2, #7
 8006d72:	601a      	str	r2, [r3, #0]
}
 8006d74:	bf00      	nop
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	e000e010 	.word	0xe000e010
 8006d84:	e000e018 	.word	0xe000e018
 8006d88:	20000000 	.word	0x20000000
 8006d8c:	10624dd3 	.word	0x10624dd3
 8006d90:	e000e014 	.word	0xe000e014

08006d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006da4 <vPortEnableVFP+0x10>
 8006d98:	6801      	ldr	r1, [r0, #0]
 8006d9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d9e:	6001      	str	r1, [r0, #0]
 8006da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006da2:	bf00      	nop
 8006da4:	e000ed88 	.word	0xe000ed88

08006da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dae:	f3ef 8305 	mrs	r3, IPSR
 8006db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b0f      	cmp	r3, #15
 8006db8:	d915      	bls.n	8006de6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dba:	4a18      	ldr	r2, [pc, #96]	@ (8006e1c <vPortValidateInterruptPriority+0x74>)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006dc4:	4b16      	ldr	r3, [pc, #88]	@ (8006e20 <vPortValidateInterruptPriority+0x78>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	7afa      	ldrb	r2, [r7, #11]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d20b      	bcs.n	8006de6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	607b      	str	r3, [r7, #4]
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	e7fd      	b.n	8006de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006de6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e24 <vPortValidateInterruptPriority+0x7c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006dee:	4b0e      	ldr	r3, [pc, #56]	@ (8006e28 <vPortValidateInterruptPriority+0x80>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d90b      	bls.n	8006e0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	603b      	str	r3, [r7, #0]
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	e7fd      	b.n	8006e0a <vPortValidateInterruptPriority+0x62>
	}
 8006e0e:	bf00      	nop
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	e000e3f0 	.word	0xe000e3f0
 8006e20:	200018d0 	.word	0x200018d0
 8006e24:	e000ed0c 	.word	0xe000ed0c
 8006e28:	200018d4 	.word	0x200018d4

08006e2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08a      	sub	sp, #40	@ 0x28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e38:	f7fe fd56 	bl	80058e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8006fa8 <pvPortMalloc+0x17c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e44:	f000 f916 	bl	8007074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e48:	4b58      	ldr	r3, [pc, #352]	@ (8006fac <pvPortMalloc+0x180>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f040 8090 	bne.w	8006f76 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01e      	beq.n	8006e9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4413      	add	r3, r2
 8006e62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d015      	beq.n	8006e9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f023 0307 	bic.w	r3, r3, #7
 8006e74:	3308      	adds	r3, #8
 8006e76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00b      	beq.n	8006e9a <pvPortMalloc+0x6e>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	617b      	str	r3, [r7, #20]
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop
 8006e98:	e7fd      	b.n	8006e96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d06a      	beq.n	8006f76 <pvPortMalloc+0x14a>
 8006ea0:	4b43      	ldr	r3, [pc, #268]	@ (8006fb0 <pvPortMalloc+0x184>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d865      	bhi.n	8006f76 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006eaa:	4b42      	ldr	r3, [pc, #264]	@ (8006fb4 <pvPortMalloc+0x188>)
 8006eac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006eae:	4b41      	ldr	r3, [pc, #260]	@ (8006fb4 <pvPortMalloc+0x188>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eb4:	e004      	b.n	8006ec0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d903      	bls.n	8006ed2 <pvPortMalloc+0xa6>
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1f1      	bne.n	8006eb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ed2:	4b35      	ldr	r3, [pc, #212]	@ (8006fa8 <pvPortMalloc+0x17c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d04c      	beq.n	8006f76 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	4413      	add	r3, r2
 8006ee4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	1ad2      	subs	r2, r2, r3
 8006ef6:	2308      	movs	r3, #8
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d920      	bls.n	8006f40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4413      	add	r3, r2
 8006f04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <pvPortMalloc+0xfc>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	613b      	str	r3, [r7, #16]
}
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	e7fd      	b.n	8006f24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	1ad2      	subs	r2, r2, r3
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f3a:	69b8      	ldr	r0, [r7, #24]
 8006f3c:	f000 f8fc 	bl	8007138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f40:	4b1b      	ldr	r3, [pc, #108]	@ (8006fb0 <pvPortMalloc+0x184>)
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	4a19      	ldr	r2, [pc, #100]	@ (8006fb0 <pvPortMalloc+0x184>)
 8006f4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f4e:	4b18      	ldr	r3, [pc, #96]	@ (8006fb0 <pvPortMalloc+0x184>)
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4b19      	ldr	r3, [pc, #100]	@ (8006fb8 <pvPortMalloc+0x18c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d203      	bcs.n	8006f62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f5a:	4b15      	ldr	r3, [pc, #84]	@ (8006fb0 <pvPortMalloc+0x184>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a16      	ldr	r2, [pc, #88]	@ (8006fb8 <pvPortMalloc+0x18c>)
 8006f60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	4b11      	ldr	r3, [pc, #68]	@ (8006fac <pvPortMalloc+0x180>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f76:	f7fe fcc5 	bl	8005904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <pvPortMalloc+0x170>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	60fb      	str	r3, [r7, #12]
}
 8006f96:	bf00      	nop
 8006f98:	bf00      	nop
 8006f9a:	e7fd      	b.n	8006f98 <pvPortMalloc+0x16c>
	return pvReturn;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3728      	adds	r7, #40	@ 0x28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	200024e0 	.word	0x200024e0
 8006fac:	200024ec 	.word	0x200024ec
 8006fb0:	200024e4 	.word	0x200024e4
 8006fb4:	200024d8 	.word	0x200024d8
 8006fb8:	200024e8 	.word	0x200024e8

08006fbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d04a      	beq.n	8007064 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fce:	2308      	movs	r3, #8
 8006fd0:	425b      	negs	r3, r3
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	4b22      	ldr	r3, [pc, #136]	@ (800706c <vPortFree+0xb0>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10b      	bne.n	8007002 <vPortFree+0x46>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	60fb      	str	r3, [r7, #12]
}
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	e7fd      	b.n	8006ffe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00b      	beq.n	8007022 <vPortFree+0x66>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	60bb      	str	r3, [r7, #8]
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	e7fd      	b.n	800701e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	4b11      	ldr	r3, [pc, #68]	@ (800706c <vPortFree+0xb0>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4013      	ands	r3, r2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d019      	beq.n	8007064 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d115      	bne.n	8007064 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	4b0b      	ldr	r3, [pc, #44]	@ (800706c <vPortFree+0xb0>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	43db      	mvns	r3, r3
 8007042:	401a      	ands	r2, r3
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007048:	f7fe fc4e 	bl	80058e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	4b07      	ldr	r3, [pc, #28]	@ (8007070 <vPortFree+0xb4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4413      	add	r3, r2
 8007056:	4a06      	ldr	r2, [pc, #24]	@ (8007070 <vPortFree+0xb4>)
 8007058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800705a:	6938      	ldr	r0, [r7, #16]
 800705c:	f000 f86c 	bl	8007138 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007060:	f7fe fc50 	bl	8005904 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007064:	bf00      	nop
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	200024ec 	.word	0x200024ec
 8007070:	200024e4 	.word	0x200024e4

08007074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800707a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800707e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007080:	4b27      	ldr	r3, [pc, #156]	@ (8007120 <prvHeapInit+0xac>)
 8007082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00c      	beq.n	80070a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3307      	adds	r3, #7
 8007092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0307 	bic.w	r3, r3, #7
 800709a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007120 <prvHeapInit+0xac>)
 80070a4:	4413      	add	r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007124 <prvHeapInit+0xb0>)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007124 <prvHeapInit+0xb0>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	4413      	add	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070c0:	2208      	movs	r2, #8
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	1a9b      	subs	r3, r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0307 	bic.w	r3, r3, #7
 80070ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4a15      	ldr	r2, [pc, #84]	@ (8007128 <prvHeapInit+0xb4>)
 80070d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070d6:	4b14      	ldr	r3, [pc, #80]	@ (8007128 <prvHeapInit+0xb4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2200      	movs	r2, #0
 80070dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070de:	4b12      	ldr	r3, [pc, #72]	@ (8007128 <prvHeapInit+0xb4>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	1ad2      	subs	r2, r2, r3
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007128 <prvHeapInit+0xb4>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	4a0a      	ldr	r2, [pc, #40]	@ (800712c <prvHeapInit+0xb8>)
 8007102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	4a09      	ldr	r2, [pc, #36]	@ (8007130 <prvHeapInit+0xbc>)
 800710a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800710c:	4b09      	ldr	r3, [pc, #36]	@ (8007134 <prvHeapInit+0xc0>)
 800710e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007112:	601a      	str	r2, [r3, #0]
}
 8007114:	bf00      	nop
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	200018d8 	.word	0x200018d8
 8007124:	200024d8 	.word	0x200024d8
 8007128:	200024e0 	.word	0x200024e0
 800712c:	200024e8 	.word	0x200024e8
 8007130:	200024e4 	.word	0x200024e4
 8007134:	200024ec 	.word	0x200024ec

08007138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007140:	4b28      	ldr	r3, [pc, #160]	@ (80071e4 <prvInsertBlockIntoFreeList+0xac>)
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e002      	b.n	800714c <prvInsertBlockIntoFreeList+0x14>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d8f7      	bhi.n	8007146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	4413      	add	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	d108      	bne.n	800717a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	441a      	add	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	441a      	add	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d118      	bne.n	80071c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b15      	ldr	r3, [pc, #84]	@ (80071e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d00d      	beq.n	80071b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	441a      	add	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	e008      	b.n	80071c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071b6:	4b0c      	ldr	r3, [pc, #48]	@ (80071e8 <prvInsertBlockIntoFreeList+0xb0>)
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	e003      	b.n	80071c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d002      	beq.n	80071d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071d6:	bf00      	nop
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	200024d8 	.word	0x200024d8
 80071e8:	200024e0 	.word	0x200024e0

080071ec <memset>:
 80071ec:	4402      	add	r2, r0
 80071ee:	4603      	mov	r3, r0
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d100      	bne.n	80071f6 <memset+0xa>
 80071f4:	4770      	bx	lr
 80071f6:	f803 1b01 	strb.w	r1, [r3], #1
 80071fa:	e7f9      	b.n	80071f0 <memset+0x4>

080071fc <_reclaim_reent>:
 80071fc:	4b29      	ldr	r3, [pc, #164]	@ (80072a4 <_reclaim_reent+0xa8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4283      	cmp	r3, r0
 8007202:	b570      	push	{r4, r5, r6, lr}
 8007204:	4604      	mov	r4, r0
 8007206:	d04b      	beq.n	80072a0 <_reclaim_reent+0xa4>
 8007208:	69c3      	ldr	r3, [r0, #28]
 800720a:	b1ab      	cbz	r3, 8007238 <_reclaim_reent+0x3c>
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	b16b      	cbz	r3, 800722c <_reclaim_reent+0x30>
 8007210:	2500      	movs	r5, #0
 8007212:	69e3      	ldr	r3, [r4, #28]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	5959      	ldr	r1, [r3, r5]
 8007218:	2900      	cmp	r1, #0
 800721a:	d13b      	bne.n	8007294 <_reclaim_reent+0x98>
 800721c:	3504      	adds	r5, #4
 800721e:	2d80      	cmp	r5, #128	@ 0x80
 8007220:	d1f7      	bne.n	8007212 <_reclaim_reent+0x16>
 8007222:	69e3      	ldr	r3, [r4, #28]
 8007224:	4620      	mov	r0, r4
 8007226:	68d9      	ldr	r1, [r3, #12]
 8007228:	f000 f872 	bl	8007310 <_free_r>
 800722c:	69e3      	ldr	r3, [r4, #28]
 800722e:	6819      	ldr	r1, [r3, #0]
 8007230:	b111      	cbz	r1, 8007238 <_reclaim_reent+0x3c>
 8007232:	4620      	mov	r0, r4
 8007234:	f000 f86c 	bl	8007310 <_free_r>
 8007238:	6961      	ldr	r1, [r4, #20]
 800723a:	b111      	cbz	r1, 8007242 <_reclaim_reent+0x46>
 800723c:	4620      	mov	r0, r4
 800723e:	f000 f867 	bl	8007310 <_free_r>
 8007242:	69e1      	ldr	r1, [r4, #28]
 8007244:	b111      	cbz	r1, 800724c <_reclaim_reent+0x50>
 8007246:	4620      	mov	r0, r4
 8007248:	f000 f862 	bl	8007310 <_free_r>
 800724c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800724e:	b111      	cbz	r1, 8007256 <_reclaim_reent+0x5a>
 8007250:	4620      	mov	r0, r4
 8007252:	f000 f85d 	bl	8007310 <_free_r>
 8007256:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007258:	b111      	cbz	r1, 8007260 <_reclaim_reent+0x64>
 800725a:	4620      	mov	r0, r4
 800725c:	f000 f858 	bl	8007310 <_free_r>
 8007260:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007262:	b111      	cbz	r1, 800726a <_reclaim_reent+0x6e>
 8007264:	4620      	mov	r0, r4
 8007266:	f000 f853 	bl	8007310 <_free_r>
 800726a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800726c:	b111      	cbz	r1, 8007274 <_reclaim_reent+0x78>
 800726e:	4620      	mov	r0, r4
 8007270:	f000 f84e 	bl	8007310 <_free_r>
 8007274:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007276:	b111      	cbz	r1, 800727e <_reclaim_reent+0x82>
 8007278:	4620      	mov	r0, r4
 800727a:	f000 f849 	bl	8007310 <_free_r>
 800727e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007280:	b111      	cbz	r1, 8007288 <_reclaim_reent+0x8c>
 8007282:	4620      	mov	r0, r4
 8007284:	f000 f844 	bl	8007310 <_free_r>
 8007288:	6a23      	ldr	r3, [r4, #32]
 800728a:	b14b      	cbz	r3, 80072a0 <_reclaim_reent+0xa4>
 800728c:	4620      	mov	r0, r4
 800728e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007292:	4718      	bx	r3
 8007294:	680e      	ldr	r6, [r1, #0]
 8007296:	4620      	mov	r0, r4
 8007298:	f000 f83a 	bl	8007310 <_free_r>
 800729c:	4631      	mov	r1, r6
 800729e:	e7bb      	b.n	8007218 <_reclaim_reent+0x1c>
 80072a0:	bd70      	pop	{r4, r5, r6, pc}
 80072a2:	bf00      	nop
 80072a4:	20000010 	.word	0x20000010

080072a8 <__libc_init_array>:
 80072a8:	b570      	push	{r4, r5, r6, lr}
 80072aa:	4d0d      	ldr	r5, [pc, #52]	@ (80072e0 <__libc_init_array+0x38>)
 80072ac:	4c0d      	ldr	r4, [pc, #52]	@ (80072e4 <__libc_init_array+0x3c>)
 80072ae:	1b64      	subs	r4, r4, r5
 80072b0:	10a4      	asrs	r4, r4, #2
 80072b2:	2600      	movs	r6, #0
 80072b4:	42a6      	cmp	r6, r4
 80072b6:	d109      	bne.n	80072cc <__libc_init_array+0x24>
 80072b8:	4d0b      	ldr	r5, [pc, #44]	@ (80072e8 <__libc_init_array+0x40>)
 80072ba:	4c0c      	ldr	r4, [pc, #48]	@ (80072ec <__libc_init_array+0x44>)
 80072bc:	f000 f87e 	bl	80073bc <_init>
 80072c0:	1b64      	subs	r4, r4, r5
 80072c2:	10a4      	asrs	r4, r4, #2
 80072c4:	2600      	movs	r6, #0
 80072c6:	42a6      	cmp	r6, r4
 80072c8:	d105      	bne.n	80072d6 <__libc_init_array+0x2e>
 80072ca:	bd70      	pop	{r4, r5, r6, pc}
 80072cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d0:	4798      	blx	r3
 80072d2:	3601      	adds	r6, #1
 80072d4:	e7ee      	b.n	80072b4 <__libc_init_array+0xc>
 80072d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072da:	4798      	blx	r3
 80072dc:	3601      	adds	r6, #1
 80072de:	e7f2      	b.n	80072c6 <__libc_init_array+0x1e>
 80072e0:	080074b8 	.word	0x080074b8
 80072e4:	080074b8 	.word	0x080074b8
 80072e8:	080074b8 	.word	0x080074b8
 80072ec:	080074bc 	.word	0x080074bc

080072f0 <__retarget_lock_acquire_recursive>:
 80072f0:	4770      	bx	lr

080072f2 <__retarget_lock_release_recursive>:
 80072f2:	4770      	bx	lr

080072f4 <memcpy>:
 80072f4:	440a      	add	r2, r1
 80072f6:	4291      	cmp	r1, r2
 80072f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072fc:	d100      	bne.n	8007300 <memcpy+0xc>
 80072fe:	4770      	bx	lr
 8007300:	b510      	push	{r4, lr}
 8007302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800730a:	4291      	cmp	r1, r2
 800730c:	d1f9      	bne.n	8007302 <memcpy+0xe>
 800730e:	bd10      	pop	{r4, pc}

08007310 <_free_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4605      	mov	r5, r0
 8007314:	2900      	cmp	r1, #0
 8007316:	d041      	beq.n	800739c <_free_r+0x8c>
 8007318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800731c:	1f0c      	subs	r4, r1, #4
 800731e:	2b00      	cmp	r3, #0
 8007320:	bfb8      	it	lt
 8007322:	18e4      	addlt	r4, r4, r3
 8007324:	f000 f83e 	bl	80073a4 <__malloc_lock>
 8007328:	4a1d      	ldr	r2, [pc, #116]	@ (80073a0 <_free_r+0x90>)
 800732a:	6813      	ldr	r3, [r2, #0]
 800732c:	b933      	cbnz	r3, 800733c <_free_r+0x2c>
 800732e:	6063      	str	r3, [r4, #4]
 8007330:	6014      	str	r4, [r2, #0]
 8007332:	4628      	mov	r0, r5
 8007334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007338:	f000 b83a 	b.w	80073b0 <__malloc_unlock>
 800733c:	42a3      	cmp	r3, r4
 800733e:	d908      	bls.n	8007352 <_free_r+0x42>
 8007340:	6820      	ldr	r0, [r4, #0]
 8007342:	1821      	adds	r1, r4, r0
 8007344:	428b      	cmp	r3, r1
 8007346:	bf01      	itttt	eq
 8007348:	6819      	ldreq	r1, [r3, #0]
 800734a:	685b      	ldreq	r3, [r3, #4]
 800734c:	1809      	addeq	r1, r1, r0
 800734e:	6021      	streq	r1, [r4, #0]
 8007350:	e7ed      	b.n	800732e <_free_r+0x1e>
 8007352:	461a      	mov	r2, r3
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	b10b      	cbz	r3, 800735c <_free_r+0x4c>
 8007358:	42a3      	cmp	r3, r4
 800735a:	d9fa      	bls.n	8007352 <_free_r+0x42>
 800735c:	6811      	ldr	r1, [r2, #0]
 800735e:	1850      	adds	r0, r2, r1
 8007360:	42a0      	cmp	r0, r4
 8007362:	d10b      	bne.n	800737c <_free_r+0x6c>
 8007364:	6820      	ldr	r0, [r4, #0]
 8007366:	4401      	add	r1, r0
 8007368:	1850      	adds	r0, r2, r1
 800736a:	4283      	cmp	r3, r0
 800736c:	6011      	str	r1, [r2, #0]
 800736e:	d1e0      	bne.n	8007332 <_free_r+0x22>
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	6053      	str	r3, [r2, #4]
 8007376:	4408      	add	r0, r1
 8007378:	6010      	str	r0, [r2, #0]
 800737a:	e7da      	b.n	8007332 <_free_r+0x22>
 800737c:	d902      	bls.n	8007384 <_free_r+0x74>
 800737e:	230c      	movs	r3, #12
 8007380:	602b      	str	r3, [r5, #0]
 8007382:	e7d6      	b.n	8007332 <_free_r+0x22>
 8007384:	6820      	ldr	r0, [r4, #0]
 8007386:	1821      	adds	r1, r4, r0
 8007388:	428b      	cmp	r3, r1
 800738a:	bf04      	itt	eq
 800738c:	6819      	ldreq	r1, [r3, #0]
 800738e:	685b      	ldreq	r3, [r3, #4]
 8007390:	6063      	str	r3, [r4, #4]
 8007392:	bf04      	itt	eq
 8007394:	1809      	addeq	r1, r1, r0
 8007396:	6021      	streq	r1, [r4, #0]
 8007398:	6054      	str	r4, [r2, #4]
 800739a:	e7ca      	b.n	8007332 <_free_r+0x22>
 800739c:	bd38      	pop	{r3, r4, r5, pc}
 800739e:	bf00      	nop
 80073a0:	2000262c 	.word	0x2000262c

080073a4 <__malloc_lock>:
 80073a4:	4801      	ldr	r0, [pc, #4]	@ (80073ac <__malloc_lock+0x8>)
 80073a6:	f7ff bfa3 	b.w	80072f0 <__retarget_lock_acquire_recursive>
 80073aa:	bf00      	nop
 80073ac:	20002628 	.word	0x20002628

080073b0 <__malloc_unlock>:
 80073b0:	4801      	ldr	r0, [pc, #4]	@ (80073b8 <__malloc_unlock+0x8>)
 80073b2:	f7ff bf9e 	b.w	80072f2 <__retarget_lock_release_recursive>
 80073b6:	bf00      	nop
 80073b8:	20002628 	.word	0x20002628

080073bc <_init>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	bf00      	nop
 80073c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c2:	bc08      	pop	{r3}
 80073c4:	469e      	mov	lr, r3
 80073c6:	4770      	bx	lr

080073c8 <_fini>:
 80073c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ca:	bf00      	nop
 80073cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ce:	bc08      	pop	{r3}
 80073d0:	469e      	mov	lr, r3
 80073d2:	4770      	bx	lr
