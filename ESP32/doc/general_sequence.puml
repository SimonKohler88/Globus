@startuml


participant "Raspberri Pi" as RPi
participant "HTTP Task" as HTTP
box "Pic Buffer" #LightBlue
participant "A" as PIC_A
participant "Ctrl" as PIC
participant "B" as PIC_B
end box
participant "JPEG Task" as JPEG
participant "Status Ctrl Task" as CTRL
box "FIFO" #LightBlue
participant "PSRAM" as RAM
participant "Free Frames Queue" as FFq
participant "Ready4FPGA Queue" as R4Fq
end box
participant "QSPI Task" as QSPI
participant "FPGA" as FPGA


CTRL -> FFq: has free Frame
activate FFq
return number of free Frames
deactivate FFq
alt if Free Frame available
    CTRL -> HTTP: Notify
    activate HTTP
    HTTP -> PIC: toggle buffer
    HTTP -> JPEG: Notify
    par Core 0

    activate JPEG
        HTTP <-> RPi: GET /frame
        HTTP -> PIC_A: Store JPEG

        HTTP -> CTRL: Notify
    deactivate HTTP
    else Core 1
        PIC_B -> JPEG: Buffer Ptr
        JPEG -> FFq: get free Frame
        activate FFq
        return Frame descriptor
        deactivate FFq
        JPEG -> RAM: decompressed JPEG
        JPEG -> CTRL: Notify
    deactivate JPEG
    else Core 0
        CTRL -> CTRL: Update LED
    end


else
    CTRL -> CTRL : Delay 10ms
end

QSPI <- *:Timer Interrupt
activate QSPI
QSPI -> R4Fq: has ready Frame
activate R4Fq
return number of ready Frames
deactivate R4Fq

alt if Frame ready
QSPI -> R4Fq: get ready Frame
activate R4Fq
return Frame descriptor
deactivate R4Fq

loop while data
RAM->QSPI: data
QSPI -> FPGA :data
end loop
QSPI -> FFq : return Frame
deactivate QSPI
end











@enduml